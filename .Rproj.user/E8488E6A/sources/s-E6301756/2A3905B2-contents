# See how NPQ corrections do with ship-based data
#
#

plot_path = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/Projects/NPQ_correction/results"

min.RSS <- function(data, par) {
  with(data, sum(( par[2] * x - y)^2))
}

getbestfr = function(x,y){data = data.frame(x = x, y = y)
mod = optim(par = 1, fn = mis.RSS, data = data)
mod$par}

data_clean_fluor = pig_data %>% filter(is.finite(CTDFLUOR))

# for now we dont care about method of measurement
data_clean_fluor$CHL = data_clean_fluor$Chla
data_clean_fluor$CHL[is.finite(data_clean_fluor$FCHLORA)] = data_clean_fluor$FCHLORA[is.finite(data_clean_fluor$FCHLORA)]
data_clean_fluor = data_clean_fluor %>% mutate( FR = ifelse(CHL > 0.2 ,CTDFLUOR/CHL,NA))

data_clean_fluor = data_clean_fluor %>% filter(is.finite(CHL))
# split into "day" and "night"

# we want profiles with a measurement > 75 m and one < 20 m
data_CTD = data_clean_fluor %>% dplyr::filter(is.finite(CHL))
data_CTD$A = paste(data_CTD$CTD_IDs,data_CTD$PIG_METHOD)
data_CTD = data_CTD[order(data_CTD$A),]
n_obs = stats::aggregate(data_CTD$DEPTH, by = list(data_CTD$A), FUN = length)
min_d = stats::aggregate(data_CTD$DEPTH, by = list(data_CTD$A), FUN = min)
max_d = stats::aggregate(data_CTD$DEPTH, by = list(data_CTD$A), FUN = max)
max_chl = stats::aggregate(data_CTD$CHL, by = list(data_CTD$A), FUN = function(x){max(x,na.rm = T)})
max_fr = stats::aggregate(data_CTD$FR, by = list(data_CTD$A), 
                          FUN = function(x){res = max(x,na.rm = T)
                                                                          if(res == -Inf){res = NA}
                                                                          res})
data_CTD = data_CTD[!duplicated(A),c("CTD_IDs","PIG_METHOD","MLD","MLD_FLAG","CHL50")]
data_CTD$nobs = n_obs$x[order(n_obs$Group.1)]
data_CTD$min_d = min_d$x[order(min_d$Group.1)]
data_CTD$max_d = max_d$x[order(max_d$Group.1)]
data_CTD$max_chl = max_chl$x[order(max_chl$Group.1)]
data_CTD$max_fr = max_fr$x[order(max_fr$Group.1)]

# choose profiles
data_CTD = data_CTD %>% dplyr::filter(ifelse(is.na(MLD),max_d > 75 ,max_d > min(MLD,CHL50,na.rm = T)), min_d < 20, nobs >= 4, max_chl > 0.2)

data_clean_fluor$nobs = NA
data_clean_fluor$min_d = NA
data_clean_fluor$max_d = NA
data_clean_fluor$max_fr = NA
data_clean_fluor$max_chl = NA
data_clean_fluor$CTDFLUOR_adj = NA
data_clean_fluor$diff = NA
data_clean_fluor$diff_perc = NA
data_clean_fluor$AD = NA
data_clean_fluor$AD_perc = NA
data_clean_fluor$SD = NA
data_clean_fluor$SD_perc = NA
data_clean_fluor$FR_adj = NA
data_clean_fluor$NPQslope = NA
data_clean_fluor$NPQr = NA
# we need to set a baseline using the maximum chl/f ratio. This is the most likely not to be affected by NPQ. 
# Further only use concentrations > 0.2 chla as we dont want weird ratios
# correct fluor and fill
for(ex in 1:nrow(data_CTD)){
  idx = which(data_clean_fluor$CTD_IDs == data_CTD$CTD_IDs[ex] & data_clean_fluor$PIG_METHOD == data_CTD$PIG_METHOD[ex])
  # only above MLD or CHL50 - when fixed use maximum of these
  fr  = getbestfr(x = )
  
  
  data_clean_fluor$CTDFLUOR_adj[idx] = data_clean_fluor$CTDFLUOR[idx] / data_CTD$max_fr[ex]
  R = data_clean_fluor$CTDFLUOR_adj[idx] / data_clean_fluor$CHL[idx]
  data_clean_fluor$FR_adj[idx][data_clean_fluor$CHL[idx] > 0] = R[data_clean_fluor$CHL[idx] > 0]
  data_clean_fluor$nobs[idx] = data_CTD$nobs[ex]
  data_clean_fluor$min_d[idx] = data_CTD$min_d[ex]
  data_clean_fluor$max_d[idx] = data_CTD$max_d[ex]
  data_clean_fluor$max_fr[idx] = data_CTD$max_fr[ex]
  data_clean_fluor$max_chl[idx] = data_CTD$max_chl[ex]
  data_clean_fluor$diff[idx] = data_clean_fluor$CTDFLUOR_adj[idx] - data_clean_fluor$CHL[idx]
  data_clean_fluor$diff_perc[idx] = (data_clean_fluor$CTDFLUOR_adj[idx] - data_clean_fluor$CHL[idx]) /data_clean_fluor$CHL[idx] * 100
  data_clean_fluor$AD[idx] = sum(data_clean_fluor$diff[idx],na.rm = T)/length(which(!is.na(data_clean_fluor$diff[idx])))
  data_clean_fluor$AD_perc[idx] = sum(data_clean_fluor$diff_perc[idx],na.rm = T)/length(which(!is.na(data_clean_fluor$diff_perc[idx])))
  data_clean_fluor$SD[idx] = data_clean_fluor$diff[idx][!is.na(data_clean_fluor$diff[idx])][which.min(data_clean_fluor$DEPTH[idx][!is.na(data_clean_fluor$diff[idx])])]
  data_clean_fluor$SD_perc[idx] = data_clean_fluor$diff[idx][!is.na(data_clean_fluor$diff[idx])][which.min(data_clean_fluor$DEPTH[idx][!is.na(data_clean_fluor$diff_perc[idx])])]
  
  dat = data.frame(x = data_clean_fluor$DEPTH[idx], y = data_clean_fluor$FR_adj[idx])
  dat = dat %>% filter(x < data_clean_fluor$MLD[idx[1]] & !is.na(y))
  if(nrow(dat) > 2){
  l = summary(lm(y~x,data = dat))
  data_clean_fluor$NPQslope[idx] = l$coefficients[2,1]
  data_clean_fluor$NPQr[idx] = l$r.squared}
  }


# calculate these for overall 
# RMSE
# RPD
# APD
# for now we will look at high concentration profiles 
# apply various NPQ corrections and fill the data frame. 
# Also create some plots to look through by eye
for(ex in 1:nrow(data_CTD)){
  pf = data_CTD$CTD_IDs[ex]
  chl_dat = data_clean_fluor[which(data_clean_fluor$CTD_IDs == pf),]
  ctd_file = file.path(ctd_path,paste(pf,"_ctd1.csv",sep = ""))
  
  f <- file( ctd_file, open = "r" )
  n=0
  while( TRUE ){
    line <- readLines( f, 1L)
    n = n+1
    
    if(grepl("CTDPRS", line)){break}
  }
  close(f)
  
  prof_data = as.data.frame(fread(ctd_file,strip.white = T , stringsAsFactors = F, skip = n+1,na.strings =  "-999"))
  f_headers = as.character(fread(ctd_file,stringsAsFactors = F, skip = n-1, nrows = 1, header = F))
  colnames(prof_data) = f_headers
  ### 5 m averages for TEMP, SAL, FLUOR, TRANS
  # grab +/- 2.5 m around the Sample Depth
  # remove any outliers > 3std of other measurments
  # calculate the average
  # insert into the table
  # For underway this will be a 15 min average
  prof_data$DEPTH = swDepth(prof_data$CTDPRS, latitude = data_clean$LATITUDE[mdx[1]])
  prof_data$CTDFLUOR_adj = prof_data$CTDFLUOR / data_CTD$max_fr[ex]
  
  jpeg(filename = file.path(plot_path,paste("QA_check_",data_CTD$CTD_IDs[ex],".jpg",sep = "")))
  par(mfrow=c(1,2))
  plot(prof_data$CTDTMP,prof_data$DEPTH, col = "blue",ylim = c(300,0), type = "l", ylab = "Depth", xlab = "")

  #axis(3,pretty(c(-0.1,max( prof_data$CTDTMP, na.rm = T))), line = 1, cex.axis = 1)
  mtext("Temp",1,line=1,at=-0.5*max( prof_data$CTDTMP, na.rm = T), cex = 1, col = "blue")
  #mtext(paste(pf), 1,line = 1, cex = 0.7)

  
  
  m =max(prof_data$CTDSAL,na.rm =T)-min(prof_data$CTDSAL, na.rm = T)
  S_scaled = (prof_data$CTDSAL - min(prof_data$CTDSAL, na.rm = T))*(max(prof_data$CTDTMP, na.rm = T)/m)
  lines( S_scaled,prof_data$DEPTH, col = "red")
  # fix this please
  # axis(3, at = c(min(prof_data$CTDTMP, na.rm = T), 0.5*(max(prof_data$CTDTMP, na.rm = T) - min(prof_data$CTDTMP, na.rm = T)),max(prof_data$CTDTMP, na.rm = T)),labels = signif(c(0, ,max(prof_data$CTDTMP, na.rm = T))*(max(prof_data$CTDSAL,na.rm =T)/max(prof_data$CTDTMP, na.rm = T)) + min(prof_data$CTDSAL, na.rm = T),digits = 2), line = 1, cex.axis = 1)
  mtext("Sal",3,line=1,at=-0.2*max(prof_data$CTDTMP, na.rm = T), cex = 1, col = "red")
  
  
  abline(h = data_CTD$MLD[ex])
  
  plot( prof_data$CTDFLUOR_adj,prof_data$DEPTH, col = "green",ylim = c(300,0), xlim = c(0,max(c(prof_data$CTDFLUOR_adj,chl_dat$CHL),na.rm = T)), type = "l",xaxt = "n", ylab = "Depth", xlab = "")
  points( chl_dat$CHL,chl_dat$DEPTH,col = "black",pch = 4)
  axis(3,pretty(c(-0.1,max(c(prof_data$CTDFLUOR_adj,chl_dat$CHL), na.rm = T))), line = 1, cex.axis = 1)
  mtext("CHLA",3,line=1,at=-0.2*max(c(prof_data$CTDFLUOR_adj,chl_dat$CHL), na.rm = T), cex = 1)
  
  
  abline(h = data_CTD$CHL50[ex])
  dev.off()
}



 