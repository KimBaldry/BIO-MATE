### Ocean Science Meeting Plots
library(ggplot2)
library(mapproj)
library(raster)
library(ggpubr)
library(sf)
library(rgdal)
library(dplyr)
library(SOmap)
library(ggnewscale)
library(ggmap)
library(scales)
library(viridis)
library(marmap)
library(sp)
library(maptools)
library(rgeos)
library(polyclip)
library(GISTools)
library(animation)
library(gridExtra)
library(gam)
library(data.table)
path = "C:/Users/kabaldry/Documents/PhD/Introduction_review/Figures/OSM"
source(file.path(path,"OSM_front_class.R"))

prof_data2 = read.csv(file.path("C:/Users/kabaldry/Documents/PhD/Introduction_review/Data","BGC_Argo_12032020env.csv"), header = T, stringsAsFactors = F)

# front region comparison
sup_front(prof_data2)

prof_data2 = prof_data2 %>% filter(is.finite(LAT),is.finite(LON), FZ_insitu == "AZ", isNight == "N", is.finite(surf_val))

prof_data$FZ_sokolov = prof_data2$FZ_sokolov
write.csv(prof_data,file.path("C:/Users/kabaldry/Documents/PhD/Introduction_review/Data","prof_data_03022020_fronts.csv")) 


write.csv(prof_data2,file.path("C:/Users/kabaldry/Documents/PhD/Introduction_review/Data","prof_data_03022020_fronts2.csv")) 

prof_data2$FZ_sokolov[which(prof_data2$FZ_sokolov %in% as.character(c(0:3)))] = "AZ"
prof_data2$FZ_sokolov[which(prof_data2$FZ_sokolov %in% as.character(c(4:6)))] = "PFZ"
prof_data2$FZ_sokolov[which(prof_data2$FZ_sokolov %in% as.character(c(7:8)))] = "SAFZ"
prof_data2$FZ_sokolov[which(prof_data2$FZ_sokolov %in% as.character(c(9:11)))] = "SAZ"
prof_data2$FZ_sokolov[which(prof_data2$FZ_sokolov %in% as.character(c(12)))] = "STZ"
prof_data2$FZ_sokolov[is.na(prof_data2$FZ_sokolov)] = prof_data2$FZ_insitu[is.na(prof_data2$FZ_sokolov)]

prof_data2 = prof_data2 %>% filter(in_Analysis == "Y")


data_CTD = prof_data2
data_CTD = data_CTD %>% mutate(DOY = as.numeric(as.Date(paste(sprintf("%02d",DD),sprintf("%02d",MM),YYYY , sep = ""), 
                                                        format = "%d%m%Y") - as.Date(paste("01","07",YYYY - round((13-MM)/13), sep = ""), format = "%d%m%Y")))
data_CTD$SCM_in = as.numeric(factor(data_CTD$SCM, levels = c("N","Y")))-1
data_CTD$log_surf_val = log10(data_CTD$surf_val)
data_CTD$BATHY_DEPTH_m[data_CTD$BATHY_DEPTH_m >0] = 0
data_CTD$log_coast_dist = log10(data_CTD$coast_dist)
JFdata = data_CTD[which(data_CTD$MM %in% c(1,2)),]
#JFdata$fr[which(JFdata$BATHY_DEPTH_m > -600 & JFdata$Latitude..S. < -60)] = 0

# bathymetry and distance to the coast are strongly correlated.
# frontal zone is also aytocorrelated with bathymetry and distance to the coast (how do we test this?)
# log surface value is only weakly correlated
# The distribution of bathymetry is bimodal around 1000m 
# there is an interaction effect between bathymetry and 
#Which is the best predictor? -> 
summary(mgcv::gam(SCM_in ~ log_coast_dist+BATHY_DEPTH_m, data = JFdata, family = binomial(logit)))
summary(mgcv::gam(SCM_in ~ log_coast_dist, data = JFdata, family = binomial(logit)))
summary(mgcv::gam(SCM_in ~ BATHY_DEPTH_m, data = JFdata, family = binomial(logit)))

# are they predictors singularly -> only investigate predictors that are
vars = c("ice_con", "BATHY_DEPTH_m", "die")
titles = paste("(",letters[1:length(vars)],")", sep = "")
xlabels = c("Sea-ice [%]", "Bathymetry [m]", "DIE [km]")
plotlist = list()
for(i in c(1:length(vars))){
  if(vars[i] != "fr"){
    vec<-paste0("SCM_in", "~s(",vars[i],")")
    s1 = mgcv::gam(as.formula(vec), data = JFdata, family = binomial(logit))
    print(summary(s1))
    sig = ifelse(summary(s1)$s.pv<0.05, 1,0)+1
    var_data = JFdata[,vars[i]]
    pred1 = data.frame("x" = seq(min(var_data, na.rm = T),max(var_data, na.rm = T),by = diff(range(var_data, na.rm = T))/3500))
    colnames(pred1) = vars[i]
    Pred = predict(s1, newdata = pred1, type = "response", se.fit = T) 
    PredTbl = data.frame( pred1, "fit" = unlist(Pred$fit), "se.fit" = unlist(Pred$se.fit))
    
    plot = ggplot(data = PredTbl, aes_string(vars[i], "fit"))  + 
      geom_smooth_ci(ci_alpha = 0.5 ) + geom_path(lwd = 1) +  geom_point(data = JFdata, aes_string(vars[i],"SCM_in"), col = "#01665e")+
      geom_rug(sides = "b",data = JFdata, aes_string(vars[i]), inherit.aes = F)+
      scale_y_continuous(name = "Proportion of SCM occurance", sec.axis = sec_axis(~., breaks = c(0,1), labels = c("No SCM", "SCM")))+ 
      xlab(xlabels[i])+ 
      theme(axis.line.y.right  = element_blank(),
            axis.line.x = element_blank(),axis.line.y.left = element_blank(), axis.ticks.y.right = element_blank()
            ,legend.position = "top",
            panel.grid.major = element_blank(),panel.grid.minor = element_blank(),plot.title = element_text( size=12), axis.title.x =  element_text(size = 12),  axis.text.x = element_text(size = 10), 
            axis.text.y.left  = element_text(size = 10),axis.text.y.right = element_text(size = 12), axis.title.y = element_text(size = 12), panel.background = element_rect(fill = "white",colour = c("grey", "#8c510a")[sig],size = 3, linetype = "solid"))
    if(grepl("log",vars[i])){plot = plot + scale_x_continuous(breaks = seq(ceiling(round(range(var_data)[1],1)),floor(range(var_data)[2]),by = 1), labels = 10^seq(ceiling(round(range(var_data)[1],1)),floor(range(var_data)[2]),by = 1))}
    
    plot.lab = ggplotGrob(plot + ggtitle(titles[i]))
    
    plot.lab$layout$l[plot.lab$layout$name == "title"] <- 1
    
    plotlist[[i]] = plot.lab
    
  }else{
    var_data = JFdata[,c("SCM_in",vars[i])]
    s1 = chisq.test(table(var_data,useNA = "no"))
    print(summary(s1))
    # s1 = glm(as.formula(paste("SCM_in ~ as.factor(",vars[i],")")), data = JFdata, family = binomial(logit))
    sig = ifelse(s1$p.value<0.05, 1,0)+1
    plot = ggplot() + geom_bar(data = JFdata, aes_string(x = vars[i], fill = "SCM"), position = "fill") + scale_fill_manual(values = c("#01665e", "grey69"))+
      xlab(xlabels[i]) + ylab("Number of profiles")+
      theme(axis.line.y.right  = element_blank(),
            axis.line.x = element_blank(),axis.line.y.left = element_blank(), axis.ticks.y.right = element_blank()
            ,legend.position = "right",
            panel.grid.major = element_blank(),panel.grid.minor = element_blank(),plot.title = element_text( size=12), axis.title.x =  element_text(size = 12),  axis.text.x = element_text(size = 10), 
            axis.text.y.left  = element_text(size = 10),axis.text.y.right = element_text(size = 12), axis.title.y = element_text(size = 12), panel.background = element_rect(fill = "white",colour = c("grey","#8c510a")[sig],size = 3, linetype = "solid"))
    plot.lab = ggplotGrob(plot + ggtitle(titles[i]))
    
    plot.lab$layout$l[plot.lab$layout$name == "title"] <- 1
    
    plotlist[[i]] = plot.lab
    
  }
}
lay = cbind(seq(1,7,2),c(seq(2,7,2),NA))
jpeg(file.path("C:/Users/kabaldry/Documents/PhD/Introduction_review/Figures/Drivers", "BGC_Argo_Drivers_plots.jpg"), width = 750, height = 1000, units = "px", quality = 90)
grid.arrange(grobs = plotlist, layout_matrix = lay)
dev.off()

