# this script will create a .gif
library(data.table)
library(RCurl)
library(dplyr)
library(animation)
library(marmap)
library(ggmap)
library(scales)
library(ggpubr)
library(raster)
library(ncdf4)
library(viridis)

# read in the index file for BGC-Argo
# read in the index file for BGC-Argo s-files [tutorial examples downloaded on 01/06/2020]
url = "ftp://ftp.ifremer.fr/ifremer/argo/" 
profiles = fread(paste(url,"argo_synthetic-profile_index.txt",sep = ""),sep = ",",header =T,sep2 = F)
profiles = profiles %>% dplyr::mutate(YYYY = as.numeric(substr(as.character(date),1,4)), MM = as.numeric(substr(as.character(date), 5,6))) # create year and month variables
profiles = profiles %>% mutate(FloatID = unlist(strsplit(file, split = "/"))[seq(2,length(unlist(strsplit(file, split = "/"))),4)])
profiles = profiles %>% mutate(dateR = as.Date(substr(date,1,8), format = "%Y%m%d"))
profiles = profiles %>% filter(latitude != 99999)
bathy = getNOAA.bathy(lat1 = 90, lat2 = -90, lon1 = 180, lon2 = -180)
bathy2 = fortify.bathy(bathy)
#coordinates(bathy2) = ~longitude+latitude
SObathy = bathy2 %>% filter(x < -30)
#NOAA.bathy = getNOAA.bathy(-180,180,-90,-30)
data(wrld_simpl, package = "maptools")
wrld_subset <- crop(wrld_simpl, extent(-180, 180, -90, -30)) 

year_list = sort(unique(profiles$YYYY)) # create a list of years
year_list = year_list[year_list >2009]

pre2010 = profiles %>% filter(YYYY <2010)

# world BGC-Argo map

baseWO =  ggplot() +
  
  geom_raster(data = bathy2, aes(x = x, y=y, fill = z))+
  geom_polygon(data =wrld_simpl, aes(x = long, y = lat, group = group), fill = "grey", colour = "black", alpha = 0.8) +
  # Convert to polar coordinates
  scale_fill_gradient(limits = c(-5000,0),oob=squish, low = "steelblue2", high = "white")+
  xlab("") + 
  ylab("") +
  # Adds axes
  # Change theme to remove axes and ticks
  theme(panel.background = element_blank(),legend.position = "none",
        panel.grid.major = element_blank(),axis.ticks=element_blank(), axis.text = element_blank())


invisible(saveGIF({
  for(yr in c(1:length(year_list[-1]))){
    for(month in seq(2,12,2))
    {
      
      sub_data_past = profiles %>% filter(dateR < as.Date(paste(year_list[yr],sprintf("%02d",month),01), format = "%Y%m%d"))
      sub_data_last = sub_data_past[order(sub_data_past$dateR, decreasing = T),]
      sub_data_last = sub_data_last[!duplicated(sub_data_last$FloatID),]
      if(month == 2){
        sub_data_last = sub_data_last %>% filter(dateR < as.Date(paste(year_list[yr],sprintf("%02d",month),01), format = "%Y%m%d"))
      }else{
      sub_data_last = sub_data_last %>% filter(dateR < as.Date(paste(year_list[yr],sprintf("%02d",month),01), format = "%Y%m%d"),
                                               dateR > as.Date(paste(year_list[yr],sprintf("%02d",month-2),01), format = "%Y%m%d"))}
      p1 <- ggplot() +
        geom_rect(aes(xmin = year_list[1], xmax = year_list[yr] + (month/12), ymin = 0, ymax = 1), fill = "red") +
        scale_x_continuous(breaks = c(year_list[1]:year_list[length(year_list)]),limits = c(year_list[1],year_list[length(year_list)]),sec.axis = sec_axis(~.,  breaks = c(year_list[1]:year_list[length(year_list)]), labels = NULL)) +
        ylim(c(0,1))+
        theme(panel.background = element_blank(),
              panel.grid.major = element_blank(),
              axis.ticks.x = element_line(colour = "black"), axis.ticks.x.bottom = element_line(colour = "black"),
              axis.ticks.length=unit(-0.25, "cm"),axis.text.x= element_text(vjust = -2, size = 18),
              axis.ticks.y = element_blank(), axis.text.y = element_blank(),legend.position = "none", panel.border = element_rect(colour = "black", fill=NA),
              plot.margin=unit(c(1,1,1.5,1.2),"cm"))
      
      
      p2 = baseWO + geom_point(data = sub_data_past, aes(x=longitude, y=latitude), col = "yellow", size = 0.5) + 
        geom_point(data = sub_data_last, aes(x=longitude, y=latitude), fill = "red", pch = 21, size = 3)
      
      
      print(ggarrange(p1,p2, ncol = 1, nrow = 2, heights = c(1,4)))
    }
    
  }
  
  
}, movie.name = "World_Argo2.gif", interval = 0.5, ani.width = 1000, ani.height = 700))






# Southern Ocean BGC-Argo Map
SO_profiles = profiles %>% dplyr::filter(latitude < -30, grepl("CHLA", parameters))
coordinates(SObathy) = ~x+y 
projection(SObathy) = "+proj=longlat +datum=WGS84"
plot_data = map_plot_proj(extent = extent(SObathy),proj_str = SOmap()$projection,resolution = 0.5, scale_res = 10000, circle = T)
SObathy2 = raster(SObathy, ncol = length(unique(SObathy@coords[,1])), nrow = length(unique(SObathy@coords[,2])))
SObathy2 = setValues(SObathy2, SObathy$z)
SObathy_reproj = transform_rast(SObathy2,SOmap()$projection,extent(plot_data$coastlines))




clip_lat = -30
# read map data 
path = "C:/Users/kabaldry/Documents/PhD/PhD_Data/SOmap"
bathySOdf2 = read.csv(file.path(path,"bathy_df", "bathymetry_SO_trim30S.csv"), stringsAsFactors = F, header = T)
coast_polys = readOGR(dsn = file.path(path,"polygons_trim30S"),layer = "polygons_trim30S")
coast_polysdf = fortify(coast_polys)
fronts =  crop(orsifronts::orsifronts,extent(-180, 180, -70, clip_lat))
fronts = spTransform(fronts,SOmap()$projection)


base_map = SOgg(SOmap(trim = -30))
baseSO = plot(base_map)

# base_map

invisible(saveGIF({
  for(yr in c(min(SO_profiles$YYYY,na.rm = T):max(SO_profiles$YYYY,na.rm = T))){
    for(month in seq(2,12,2))
    {
      
      sub_data_past = SO_profiles %>% filter(dateR < as.Date(paste(year_list[yr],sprintf("%02d",month),01), format = "%Y%m%d"))
      sub_data_last = sub_data_past[order(sub_data_past$dateR, decreasing = T),]
      sub_data_last = sub_data_last[!duplicated(sub_data_last$FloatID),]
      if(month == 2){
        sub_data_last = sub_data_last %>% filter(dateR < as.Date(paste(year_list[yr],sprintf("%02d",month),01), format = "%Y%m%d"))
      }else{
        sub_data_last = sub_data_last %>% filter(dateR < as.Date(paste(year_list[yr],sprintf("%02d",month),01), format = "%Y%m%d"),
                                                 dateR > as.Date(paste(year_list[yr],sprintf("%02d",month-2),01), format = "%Y%m%d"))}
      if(nrow(sub_data_past) == 0){
        
        p1 <- ggplot() +
          geom_rect(aes(xmin = year_list[1], xmax = year_list[yr] + (month/12), ymin = 0, ymax = 1), fill = "red") +
          scale_x_continuous(breaks = c(year_list[1]:year_list[length(year_list)]),limits = c(year_list[1],year_list[length(year_list)]),sec.axis = sec_axis(~.,  breaks = c(year_list[1]:year_list[length(year_list)]), labels = NULL)) +
          ylim(c(0,1))+
          theme(panel.background = element_blank(),
                panel.grid.major = element_blank(),
                axis.ticks.x = element_line(colour = "black"), axis.ticks.x.bottom = element_line(colour = "black"),
                axis.ticks.length=unit(-0.25, "cm"),axis.text.x= element_text(vjust = -2, size = 18),
                axis.ticks.y = element_blank(), axis.text.y = element_blank(),legend.position = "none", panel.border = element_rect(colour = "black", fill=NA),
                plot.margin=unit(c(1,1,1.5,1.2),"cm"))
        
        
        p2 = baseSO
        print(ggarrange(p1,p2, ncol = 1, nrow = 2, heights = c(1,5)))
      }else{
      
      sub_data_last = sub_data_last[,c("longitude","latitude")]
      colnames(sub_data_last) = c("long","lat")
      coordinates(sub_data_last) <- ~long+lat #check right way round
      projection(sub_data_last) <- "+proj=longlat +datum=WGS84"
      sub_data_last = spTransform(sub_data_last,SOmap()$projection)
      sub_data_last = data.frame(sub_data_last)
      
      sub_data_past = sub_data_past[,c("longitude","latitude")]
      colnames(sub_data_past) = c("long","lat")
      coordinates(sub_data_past) <- ~long+lat #check right way round
      projection(sub_data_past) <- "+proj=longlat +datum=WGS84"
      sub_data_past = spTransform(sub_data_past,SOmap()$projection)
      sub_data_past = data.frame(sub_data_past)
      
      
      p1 <- ggplot() +
        geom_rect(aes(xmin = year_list[1], xmax = year_list[yr] + (month/12), ymin = 0, ymax = 1), fill = "red") +
        scale_x_continuous(breaks = c(year_list[1]:year_list[length(year_list)]),limits = c(year_list[1],year_list[length(year_list)]),sec.axis = sec_axis(~.,  breaks = c(year_list[1]:year_list[length(year_list)]), labels = NULL)) +
        ylim(c(0,1))+
        theme(panel.background = element_blank(),
              panel.grid.major = element_blank(),
              axis.ticks.x = element_line(colour = "black"), axis.ticks.x.bottom = element_line(colour = "black"),
              axis.ticks.length=unit(-0.25, "cm"),axis.text.x= element_text(vjust = -2, size = 18),
              axis.ticks.y = element_blank(), axis.text.y = element_blank(),legend.position = "none", panel.border = element_rect(colour = "black", fill=NA),
              plot.margin=unit(c(1,1,1.5,1.2),"cm"))
      
      
      p2 = baseSO + geom_point(data = sub_data_past, aes(x=long, y=lat), col = "yellow", size = 0.5) + 
        geom_point(data = sub_data_last, aes(x=long, y=lat), fill = "red", pch = 21, size = 3)
      
      
      print(ggarrange(p1,p2, ncol = 1, nrow = 2, heights = c(1,5)))
    }}
    
  }
  
  
}, movie.name = "SO_Argo2.gif", interval = 0.5, ani.width = 1000, ani.height = 700))


library(ncdf4)

dir ="C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/Old PhD work_01042020/Viz/IMOS Pres/6902735_data"
# dir2 ="C:/Users/kabaldry/Documents/PhD/Cartoons/IMOS Pres/5905370_data"
# data = nc_open(file.path(dir2, "5905370_Rtraj.nc"))
p6902735 = profiles %>% filter (FloatID == "6902735",!(substr(basename(file),14,14) == "D"))
spatial_df = p6902735[1:216,]
#download files
# for(fl in 180:219){
#   download.file(paste(url,"dac/", p6902735$file[fl], sep = ""), file.path(dir,basename(p6902735$file[fl])), mode = "wb")
# }
files = list.files(dir, pattern = ".nc")

bathy_float = bathy2 %>% filter( x > min(spatial_df$longitude)-5, x < max(spatial_df$longitude)+5, y > min(spatial_df$latitude)-10, y < max(spatial_df$latitude)+10)
wrld_subset2 <- crop(wrld_simpl, extent(min(spatial_df$longitude)-5, max(spatial_df$longitude)+5, min(spatial_df$latitude)-10, max(spatial_df$latitude)+10))
rm(prof_df_all)
invisible(saveGIF({
  
for(fl in c(1:216)){
  prof = nc_open(file.path(dir,files[fl]))
  Param = ncvar_get(prof, "STATION_PARAMETERS")
  BBP_col= 5
  prof_df = data.frame("CHLA" = ncvar_get(prof,"CHLA")[,BBP_col], "PRES" = ncvar_get(prof,"PRES")[,BBP_col])
  prof_df = prof_df %>% filter(PRES<1000)
  prof_df = data.frame(cbind(rep(126+fl, nrow(prof_df)),prof_df))
  int_prof_df = data.frame("CYCLE" = rep(fl, 1999),"PRES" = seq(1,1000,0.5), "CHLA" = approx(x = prof_df$PRES,y = prof_df$CHLA, xout = seq(1,1000,0.5), rule = 2)$y)
  colnames(prof_df)[1] = "CYCLE"
  nc_close(prof)
  if(fl == 1){prof_df_all = int_prof_df
  }else{
    prof_df_all = rbind(prof_df_all,int_prof_df)}
  p1 = ggplot() +
    geom_raster(data = bathy_float, aes(x = x, y=y, fill = z))+
    xlab("") + ylab("")+
    geom_polygon(data =wrld_subset2, aes(x = long, y = lat, group = group), fill = "grey", colour = "black", alpha = 0.8) +
    geom_point(data = spatial_df[1:fl,], aes(x=longitude,y=latitude), fill = "yellow", colour = "yellow", pch = 21, size = 4) + 
    theme(panel.background = element_blank(),legend.position = "none",
          panel.grid.major = element_blank(),axis.ticks=element_blank(), axis.text = element_blank()) 
  
  p2 = ggplot(data = prof_df, aes(x = CHLA, y = PRES, col = CHLA)) +   geom_point()+
    ylab("Depth") +  ylim(c(1000,0)) + 
    xlab("Chlorophyll (ug/L)")+ xlim(c(0,2))+ scale_colour_viridis(limits = c(0,2), oob = squish)+ #scale_color_viridis_c(begin = 0, end = 0.001)+
    theme(panel.background = element_blank(),legend.position = "none",
  panel.grid.major = element_blank(), panel.border = element_rect(colour = "black", fill=NA), legend.title = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22))
  #   
  # # Create an empty grid where n is the total number of cells
  # prof_df_all2 = prof_df_all
  # coordinates(prof_df_all2) <- ~CYCLE+PRES
  # N = signif(1000000/(94-fl),1)
  # grd              <- data.frame("x" = rep(c(1:fl)))
  # names(grd)       <- c("CYCLE", "PRES")
  # coordinates(grd) <- ~CYCLE+PRES
  # gridded(grd)     <- TRUE  # Create SpatialPixel object
  # fullgrid(grd)    <- TRUE  # Create SpatialGrid object
  # 
  # # Interpolate the grid cells using a power value of 2 (idp=2.0)
  # P.idw <- gstat::idw(CHLA ~ 1, prof_df_all2, newdata=grd, idp=2.0,nmax = 2)
  # int_prof_df_all = as.data.frame(P.idw)
  
  p3 = ggplot(data = prof_df_all, aes( x= CYCLE, y = PRES, z= CHLA, fill = CHLA))  +geom_tile() +
    ylab("Depth") +  ylim(c(1000,0)) + xlab("")+ 
     scale_x_continuous(limits = c(1,220),sec.axis = sec_axis(~., name = "Cycle")) + scale_fill_viridis("Chlorophyll (ug/L)", limits = c(0.5,2), oob = squish)+
    theme(panel.background = element_blank(),axis.ticks.x.bottom = element_blank(), axis.text.x.bottom = element_blank(),
          panel.grid.major = element_blank(), panel.border = element_rect(colour = "black", fill=NA), legend.position = "bottom", axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.title = element_text(size = 22), legend.text = element_text(size = 18)) 
  print(ggarrange(p1,p2,p3, ncol = 3, nrow = 1, widths = c(2,3.5,7)))
   }
  
}, movie.name = "6902735_profiles_07082020.gif", interval = 0.25, ani.width = 1000, ani.height = 400))

