data2[un,c("CTD_IDs")] = joined_t$CTD_ID}}
### match closest positions
if(nrow(unmatched_df_p) > 0){
# match with closest lat/lon on same date
unmatched_df_p$dist_min  = unlist(lapply(1:nrow(unmatched_df_p), calc.dist.min)$min)
unmatched_df_p$d_diff = unlist(lapply(1:nrow(unmatched_df_p), calc.dist.diff))
# check within 1 km
unmatched_df_p  = unmatched_df_p %>% filter(d_diff < d_thresh)
# Any matches?
if(nrow(unmatched_df_t) == 0 & nrow(unmatched_df_p) > 0){
# get CTD_ID
unmatched_df_p$CTD_ID = unlist(lapply(1:nrow(unmatched_df_p),function(x){CTD_df$CTD_ID[unmatched_df_p$dist_min[x]]}))
# join with data 2 IDs
joined_p = left_join(data.frame("STNCAST" = data2_stncast[un]),unmatched_df_p , by = "STNCAST")
# fill in data2 with matched data
data2[un,c("CTD_IDs")] = joined_p$CTD_ID}}
if(exists("joined_t") & exists("joined_p"))
{
# join with data 2 IDs
joined_t_p = left_join(joined_t,unmatched_df_p , by = "STNCAST")
data2[un,c("CTD_IDs")] = joined_t_p$CTD_ID}
}
rm(unmatched_df, CTD_df,times, joined_t, joined_t_p,joined_p, unmatched_df_p, unmatched_df_t)
}
# unmatched data
unmatched_df = data.frame("STNCAST" = data2_stncast[un],"Time" = as.character(data2$TIME_analyser[un]), "Date" = as.character(data2$DATE_analyser[un]), "LAT" = data2$LAT_analyser[un],  "LON" = data2$LON_analyser[un], stringsAsFactors = F)
unmatched_df = unmatched_df[!duplicated(unmatched_df$STNCAST),]
# get ctd basic information
CTD_df = data.frame("CTD_ID" = character(),"DATE" = character(), "TIME_s" = as.POSIXct(character()), "TIME_b"= as.POSIXct(character()), "TIME_e"= as.POSIXct(character()), "LAT_s"=numeric(), "LON_s" = numeric(), "LAT_b"=numeric(), "LON_b" = numeric(), "LAT_e"=numeric(), "LON_e" = numeric())
for(ctd in CTD_info$CTD_ID){
ctd_file = file.path(ctd_path,paste(ctd,"_ctd1.csv",sep = ""))
time_s = NA
time_b = NA
time_e = NA
# open file and read relevent lines
f <- file( ctd_file, open = "r" )
while( TRUE ){
line <- readLines( f, 1L ,skipNul = T)
if( grepl( "DATE =", line ) ){
date <- trimws(sub("DATE =", "", line ))
}
if( grepl( "CTD_START_TIME =", line ) ){
t_line = line
time_s<- trimws(sub("UTC","",sub("CTD_START_TIME =", "", line )))
}
if( grepl( "CTD_BOTTOM_TIME =", line ) ){
time_b <- trimws(sub("UTC","",sub( "CTD_BOTTOM_TIME =", "", line )))
}
if( grepl( "CTD_END_TIME =", line ) ){
time_e <- trimws(sub("UTC","",sub( "CTD_END_TIME =", "", line )))
}
if( grepl( "CTD_START_LATITUDE =", line ) ){
lat_s <- as.numeric(sub("CTD_START_LATITUDE =", "", line ))
}
if( grepl( "CTD_START_LONGITUDE =", line ) ){
lon_s <- as.numeric(sub("CTD_START_LONGITUDE =", "", line ))
}
if( grepl( "CTD_BOTTOM_LATITUDE =", line ) ){
lat_b <- as.numeric(sub("CTD_BOTTOM_LATITUDE =", "", line ))
}
if( grepl( "CTD_BOTTOM_LONGITUDE =", line ) ){
lon_b <- as.numeric(sub("CTD_BOTTOM_LONGITUDE =", "", line ))
}
if( grepl( "CTD_END_LATITUDE =", line ) ){
lat_e <- as.numeric(sub("CTD_END_LATITUDE =", "", line ))
}
if( grepl( "CTD_END_LONGITUDE =", line ) ){
lon_e <- as.numeric(sub("CTD_END_LONGITUDE =", "", line ))
}
if(grepl("CTDPRS", line)){break}
}
close(f)
times = as.POSIXct(c(paste(date,time_s), paste(date,time_b), paste(date,time_e)), format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
# check forward in time, if not add 24 hrs as likely crossed days.
if(!is.na(times[2]) & !is.na(times[1])){
t_diff_check = times[2] - times[1]
if(t_diff_check < 0){times[2] = times[2] + (3600*24)}
}
if(!is.na(times[3]) & !is.na(times[1])){
t_diff_check = times[3] - times[1]
if(t_diff_check < 0){times[3] = times[3] + (3600*24)}
}
# gather ctd information
CTD_df = CTD_df %>% add_row(CTD_ID = ctd, DATE = date, TIME_s = times[1], TIME_b= times[2], TIME_e= times[3], LAT_s = lat_s, LON_s = lon_s, LAT_b = lat_b, LON_b = lon_b, LAT_e = lat_e, LON_e = lon_e)
#
# intvls1 = c(270,270,270)*60
# intvls2 = c(270,270,270)*60
# tdx = which(is.finite(times))
# if(all(is.na(times))){print(paste("There is no time information in ctd file",ctd))}
# if(any(unmatched_df$Date == date)){
#   unmatched_df_sub = unmatched_df %>% filter(Date == date)
#   unmatched_df_sub_t = unmatched_df_sub %>% mutate(time_m = as.POSIXct(paste(Date,Time), format = "%Y-%m-%d %H:%M:%S", tz = "UTC"))
#   unmatched_df_sub_p
#
#   # match closest times
#     max_t = max(times[tdx] + intvls1[tdx])
#     min_t = min(times[tdx] - intvls2[tdx])
#     res = unmatched_df_sub_t$time_m > min_t & unmatched_df_sub_t$time_m < max_t
#     if(length(which(res)) > 1){res = which.min(abs(unmatched_df_sub_t$time_m - min_t))} # get minimum time difference
#     if(any(res)){
#       data2$CTD_IDs[data2_stncast == unmatched_df_sub_t$STNCAST[res]] = ctd
#       data2$STNNBR[data2_stncast == unmatched_df_sub_t$STNCAST[res]] = stn
#       data2$CASTNO[data2_stncast == unmatched_df_sub_t$STNCAST[res]] = cast
#     }
#     }
}
View(CTD_df)
### match closest times
col_t = c(3:5)[!colSums(is.na(CTD_df[3:5])) == nrow(CTD_df)]
# find closest time
unmatched_df_t = unmatched_df %>% filter(!is.na(Time), !is.empty(Time), !is.empty(Date)) %>%
mutate(time_m = as.POSIXct(paste(Date,Time), format = "%Y-%m-%d %H:%M:%S", tz = "UTC"))
unmatched_df_p = unmatched_df %>% filter(is.na(Time) | Time == "", !is.na(LAT))
if(nrow(unmatched_df_t) > 0){
unmatched_df_t$closest_t = unlist(lapply(1:nrow(unmatched_df_t), calc.time.min))
unmatched_df_t$t_diff = unlist(lapply(1:nrow(unmatched_df_t), calc.time.diff))
# old code
# if(length(col_t) > 1){
#
# unmatched_df_t = unmatched_df_t %>% mutate(closest_t = which.min(abs(unlist(lapply(col_t, FUN = function(x){CTD_df[,x] - time_m}))))[1]) %>%
#                                   mutate(t_diff = abs(gather(CTD_df[,col_t])$value[closest_t] - time_m))}else{
# unmatched_df_t = unmatched_df_t %>% mutate(closest_t = which.min(abs(unlist(lapply(col_t, FUN = function(x){CTD_df[,x] - time_m}))))[1]) %>%
#                                       mutate(t_diff = abs(CTD_df[,col_t][closest_t] - time_m))
#                                   }
# check it is within 3 hours and assign CTD_ID
unmatched_df_t = unmatched_df_t %>% filter(!is.na(closest_t), t_diff < t_thresh)
# Any matches?
if(nrow(unmatched_df_p) == 0 & nrow(unmatched_df_t) > 0){
# get CTD_IDs
unmatched_df_t$CTD_ID = unlist(lapply(1:nrow(unmatched_df_t),function(x){r = CTD_df$CTD_ID[unmatched_df_t$closest_t[x]%%nrow(CTD_df)]
if(is.empty(r)){r = CTD_df$CTD_ID[nrow(CTD_df)]}
return(r)}))
# join with data 2 IDs
joined_t = left_join(data.frame("STNCAST" = data2_stncast[un]),unmatched_df_t , by = "STNCAST")
# fill in data2 with matched data
data2[un,c("CTD_IDs")] = joined_t$CTD_ID}}
calc.dist.min(1)
calc.dist.min = function(x){
mins = which.min(distGeo(c(unmatched_df_p$LON[x], unmatched_df_p$LAT[x]), as.matrix(CTD_df[,c("LON_s","LAT_s")])))[1]
dists = distGeo(c(unmatched_df_p$LON[x], unmatched_df_p$LAT[x]), as.matrix(CTD_df[mins,c("LON_s","LAT_s")]))
if(any(!is.na(CTD_df$LON_b))){
minb = which.min(distGeo(c(unmatched_df_p$LON[x], unmatched_df_p$LAT[x]), as.matrix(CTD_df[,c("LON_b","LAT_b")])))[1]
mins = c(mins, minb)
distb = distGeo(c(unmatched_df_p$LON[x], unmatched_df_p$LAT[x]), as.matrix(CTD_df[minb,c("LON_b","LAT_b")]))
dists = c(dists, distb)}
if(any(!is.na(CTD_df$LON_e))){
mine = which.min(distGeo(c(unmatched_df_p$LON[x], unmatched_df_p$LAT[x]), as.matrix(CTD_df[,c("LON_e","LAT_e")])))[1]
mins = c(mins, mine)
diste = distGeo(c(unmatched_df_p$LON[x], unmatched_df_p$LAT[x]), as.matrix(CTD_df[mine,c("LON_e","LAT_e")]))
dists = c(dists, diste)}
data.frame(min = mins[which.min(dists)],diff = dists[which.min(dists)])
}
calc.dist.min(1)
x=1
which.min(distGeo(c(unmatched_df_p$LON[x], unmatched_df_p$LAT[x]), as.matrix(CTD_df[,c("LON_s","LAT_s")])))[1]
c(unmatched_df_p$LON[x], unmatched_df_p$LAT[x])
View(unmatched_df_p)
View(unmatched_df)
unmatched_df_p = unmatched_df %>% filter(is.na(Time) | Time == "", !is.na(LAT))
unmatched_df_p = unmatched_df %>% filter(!is.na(LAT))
calc.dist.min(1)
A = lapply(1:2, calc.dist.min)
A
A$diff
A[[$diff
A[[]]$diff
A[[1]]$diff
A[[:]]$diff
unlist[A]
A[[1]]
apply(1:2, calc.dist.min)
lapply(A,"[",2)
lapply(A,"[","2"diff)
lapply(A,"[","diff")
# match with closest lat/lon on same date
d_calc = lapply(1:nrow(unmatched_df_p), calc.dist.min)
unlist(lapply(d_calc,"[","min"))
unmatched_df_p$dist_min  = unlist(lapply(d_calc,"[","min"))
unmatched_df_p$d_diff = unlist(lapply(d_calc,"[","diff"))
View(unmatched_df_p)
ex
# find closest time
unmatched_df_t = unmatched_df %>% filter(!is.na(Time), !is.empty(Time), !is.empty(Date)) %>%
mutate(time_m = as.POSIXct(paste(Date,Time), format = "%Y-%m-%d %H:%M:%S", tz = "UTC"))
notime = ifelse(nrow(unmatched_df_t) == 0,T,F)
unmatched_df_p = unmatched_df %>% filter(!is.na(LAT))
nopos = ifelse(nrow(unmatched_df_p) == 0,T,F)
if(nrow(unmatched_df_t) > 0){
unmatched_df_t$closest_t = unlist(lapply(1:nrow(unmatched_df_t), calc.time.min))
unmatched_df_t$t_diff = unlist(lapply(1:nrow(unmatched_df_t), calc.time.diff))
# old code
# if(length(col_t) > 1){
#
# unmatched_df_t = unmatched_df_t %>% mutate(closest_t = which.min(abs(unlist(lapply(col_t, FUN = function(x){CTD_df[,x] - time_m}))))[1]) %>%
#                                   mutate(t_diff = abs(gather(CTD_df[,col_t])$value[closest_t] - time_m))}else{
# unmatched_df_t = unmatched_df_t %>% mutate(closest_t = which.min(abs(unlist(lapply(col_t, FUN = function(x){CTD_df[,x] - time_m}))))[1]) %>%
#                                       mutate(t_diff = abs(CTD_df[,col_t][closest_t] - time_m))
#                                   }
# check it is within 3 hours and assign CTD_ID
unmatched_df_t = unmatched_df_t %>% filter(!is.na(closest_t), t_diff < t_thresh)
# Any matches?
if(nrow(unmatched_df_p) == 0 & nrow(unmatched_df_t) > 0){
# get CTD_IDs
unmatched_df_t$CTD_ID = unlist(lapply(1:nrow(unmatched_df_t),function(x){r = CTD_df$CTD_ID[unmatched_df_t$closest_t[x]%%nrow(CTD_df)]
if(is.empty(r)){r = CTD_df$CTD_ID[nrow(CTD_df)]}
return(r)}))
# join with data 2 IDs
joined_t = left_join(data.frame("STNCAST" = data2_stncast[un]),unmatched_df_t , by = "STNCAST")
# fill in data2 with matched data
data2[un,c("CTD_IDs")] = joined_t$CTD_ID}}
### match closest positions
if(nrow(unmatched_df_p) > 0){
# match with closest lat/lon on same date
d_calc = lapply(1:nrow(unmatched_df_p), calc.dist.min)
unmatched_df_p$dist_min  = unlist(lapply(d_calc,"[","min"))
unmatched_df_p$d_diff = unlist(lapply(d_calc,"[","diff"))
# check within 1 km
unmatched_df_p  = unmatched_df_p %>% filter(d_diff < d_thresh)
# Any matches?
# if no time matches
if(nrow(unmatched_df_t) == 0 & nrow(unmatched_df_p) > 0){
# get CTD_ID
unmatched_df_p$CTD_ID = unlist(lapply(1:nrow(unmatched_df_p),function(x){CTD_df$CTD_ID[unmatched_df_p$dist_min[x]]}))
# join with data 2 IDs
joined_p = left_join(data.frame("STNCAST" = data2_stncast[un]),unmatched_df_p , by = "STNCAST")
# fill in data2 with matched data
data2[un,c("CTD_IDs")] = joined_p$CTD_ID}}
!nopos & !notime
View(unmatched_df)
View(unmatched_df_p)
CTD_df$DATE[2]
unmatched_df_p = unmatched_df_p %>% mutate(Date_match = ifelse(Date == CTD_df$DATE[dist_min],T,F))
View(unmatched_df_p)
# join with data 2 IDs
joined_t_p = left_join(joined_t,unmatched_df_p , by = "STNCAST")
View(joined_t_p)
View(joined_t)
# unmatched data
unmatched_df = data.frame("STNCAST" = data2_stncast[un],"Time" = as.character(data2$TIME_analyser[un]), "Date" = as.character(data2$DATE_analyser[un]), "LAT" = data2$LAT_analyser[un],  "LON" = data2$LON_analyser[un], stringsAsFactors = F)
unmatched_df = unmatched_df[!duplicated(unmatched_df$STNCAST),]
# can only match when time AND position info available
unmatched_df_t = unmatched_df %>% filter(!is.na(Time), !is.empty(Time), !is.empty(Date)) %>%
mutate(time_m = as.POSIXct(paste(Date,Time), format = "%Y-%m-%d %H:%M:%S", tz = "UTC"))
notime = ifelse(nrow(unmatched_df_t) == 0,T,F)
unmatched_df_p = unmatched_df %>% filter(!is.na(LAT))
nopos = ifelse(nrow(unmatched_df_p) == 0,T,F)
!nopos
if(!nopos){
# get ctd basic information
CTD_df = data.frame("CTD_ID" = character(),"DATE" = character(), "TIME_s" = as.POSIXct(character()), "TIME_b"= as.POSIXct(character()), "TIME_e"= as.POSIXct(character()), "LAT_s"=numeric(), "LON_s" = numeric(), "LAT_b"=numeric(), "LON_b" = numeric(), "LAT_e"=numeric(), "LON_e" = numeric())
if(nrow(unmatched_df) > 0){
if(nrow(CTD_info) == 0){print(paste("There is no CTD data for", ex))}else{
for(ctd in CTD_info$CTD_ID){
ctd_file = file.path(ctd_path,paste(ctd,"_ctd1.csv",sep = ""))
time_s = NA
time_b = NA
time_e = NA
# open file and read relevent lines
f <- file( ctd_file, open = "r" )
while( TRUE ){
line <- readLines( f, 1L ,skipNul = T)
if( grepl( "DATE =", line ) ){
date <- trimws(sub("DATE =", "", line ))
}
if( grepl( "CTD_START_TIME =", line ) ){
t_line = line
time_s<- trimws(sub("UTC","",sub("CTD_START_TIME =", "", line )))
}
if( grepl( "CTD_BOTTOM_TIME =", line ) ){
time_b <- trimws(sub("UTC","",sub( "CTD_BOTTOM_TIME =", "", line )))
}
if( grepl( "CTD_END_TIME =", line ) ){
time_e <- trimws(sub("UTC","",sub( "CTD_END_TIME =", "", line )))
}
if( grepl( "CTD_START_LATITUDE =", line ) ){
lat_s <- as.numeric(sub("CTD_START_LATITUDE =", "", line ))
}
if( grepl( "CTD_START_LONGITUDE =", line ) ){
lon_s <- as.numeric(sub("CTD_START_LONGITUDE =", "", line ))
}
if( grepl( "CTD_BOTTOM_LATITUDE =", line ) ){
lat_b <- as.numeric(sub("CTD_BOTTOM_LATITUDE =", "", line ))
}
if( grepl( "CTD_BOTTOM_LONGITUDE =", line ) ){
lon_b <- as.numeric(sub("CTD_BOTTOM_LONGITUDE =", "", line ))
}
if( grepl( "CTD_END_LATITUDE =", line ) ){
lat_e <- as.numeric(sub("CTD_END_LATITUDE =", "", line ))
}
if( grepl( "CTD_END_LONGITUDE =", line ) ){
lon_e <- as.numeric(sub("CTD_END_LONGITUDE =", "", line ))
}
if(grepl("CTDPRS", line)){break}
}
close(f)
times = as.POSIXct(c(paste(date,time_s), paste(date,time_b), paste(date,time_e)), format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
# check forward in time, if not add 24 hrs as likely crossed days.
if(!is.na(times[2]) & !is.na(times[1])){
t_diff_check = times[2] - times[1]
if(t_diff_check < 0){times[2] = times[2] + (3600*24)}
}
if(!is.na(times[3]) & !is.na(times[1])){
t_diff_check = times[3] - times[1]
if(t_diff_check < 0){times[3] = times[3] + (3600*24)}
}
# gather ctd information
CTD_df = CTD_df %>% add_row(CTD_ID = ctd, DATE = date, TIME_s = times[1], TIME_b= times[2], TIME_e= times[3], LAT_s = lat_s, LON_s = lon_s, LAT_b = lat_b, LON_b = lon_b, LAT_e = lat_e, LON_e = lon_e)
#
# intvls1 = c(270,270,270)*60
# intvls2 = c(270,270,270)*60
# tdx = which(is.finite(times))
# if(all(is.na(times))){print(paste("There is no time information in ctd file",ctd))}
# if(any(unmatched_df$Date == date)){
#   unmatched_df_sub = unmatched_df %>% filter(Date == date)
#   unmatched_df_sub_t = unmatched_df_sub %>% mutate(time_m = as.POSIXct(paste(Date,Time), format = "%Y-%m-%d %H:%M:%S", tz = "UTC"))
#   unmatched_df_sub_p
#
#   # match closest times
#     max_t = max(times[tdx] + intvls1[tdx])
#     min_t = min(times[tdx] - intvls2[tdx])
#     res = unmatched_df_sub_t$time_m > min_t & unmatched_df_sub_t$time_m < max_t
#     if(length(which(res)) > 1){res = which.min(abs(unmatched_df_sub_t$time_m - min_t))} # get minimum time difference
#     if(any(res)){
#       data2$CTD_IDs[data2_stncast == unmatched_df_sub_t$STNCAST[res]] = ctd
#       data2$STNNBR[data2_stncast == unmatched_df_sub_t$STNCAST[res]] = stn
#       data2$CASTNO[data2_stncast == unmatched_df_sub_t$STNCAST[res]] = cast
#     }
#     }
}
### match closest times
col_t = c(3:5)[!colSums(is.na(CTD_df[3:5])) == nrow(CTD_df)]
if(!notime){
#calculate time differences
unmatched_df_t$closest_t = unlist(lapply(1:nrow(unmatched_df_t), calc.time.min))
unmatched_df_t$t_diff = unlist(lapply(1:nrow(unmatched_df_t), calc.time.diff))
# old code
# if(length(col_t) > 1){
#
# unmatched_df_t = unmatched_df_t %>% mutate(closest_t = which.min(abs(unlist(lapply(col_t, FUN = function(x){CTD_df[,x] - time_m}))))[1]) %>%
#                                   mutate(t_diff = abs(gather(CTD_df[,col_t])$value[closest_t] - time_m))}else{
# unmatched_df_t = unmatched_df_t %>% mutate(closest_t = which.min(abs(unlist(lapply(col_t, FUN = function(x){CTD_df[,x] - time_m}))))[1]) %>%
#                                       mutate(t_diff = abs(CTD_df[,col_t][closest_t] - time_m))
#                                   }
# check it is within 3 hours and assign CTD_ID
unmatched_df_t = unmatched_df_t %>% filter(!is.na(closest_t), t_diff < t_thresh)
# Any matches?
if(nrow(unmatched_df_t) > 0){
# get CTD_IDs
unmatched_df_t$CTD_ID = unlist(lapply(1:nrow(unmatched_df_t),function(x){r = CTD_df$CTD_ID[unmatched_df_t$closest_t[x]%%nrow(CTD_df)]
if(is.empty(r)){r = CTD_df$CTD_ID[nrow(CTD_df)]}
return(r)}))
# join with data 2 IDs
joined_t = left_join(data.frame("STNCAST" = data2_stncast[un]),unmatched_df_t , by = "STNCAST")
}}
### match closest positions
# match with closest lat/lon on same date
d_calc = lapply(1:nrow(unmatched_df_p), calc.dist.min)
unmatched_df_p$dist_min  = unlist(lapply(d_calc,"[","min"))
unmatched_df_p$d_diff = unlist(lapply(d_calc,"[","diff"))
# check within distance threshold
unmatched_df_p  = unmatched_df_p %>% filter(d_diff < d_thresh)
# Any matches?
if(nrow(unmatched_df_p) > 0 & notime){
# if no time matches consider date of position matches.
unmatched_df_p = unmatched_df_p %>% mutate(Date_match = ifelse(Date == CTD_df$DATE[dist_min],T,F))
unmatched_df_p = unmatched_df_p %>% filter(Date_match)
}
if(nrow(unmatched_df_p) > 0){
# get CTD_ID
unmatched_df_p$CTD_ID = unlist(lapply(1:nrow(unmatched_df_p),function(x){CTD_df$CTD_ID[unmatched_df_p$dist_min[x]]}))
# join with data 2 IDs
joined_p = left_join(data.frame("STNCAST" = data2_stncast[un]),unmatched_df_p , by = "STNCAST")
if(exists("joined_t")){
# join with data 2 IDs
joined_t_p = left_join(joined_t,unmatched_df_p , by = "STNCAST")
}else{joined_t_p = joined_p}
data2[un,c("CTD_IDs")] = joined_t_p$CTD_ID}
}
rm(unmatched_df, CTD_df,times, joined_t, joined_t_p,joined_p, unmatched_df_p, unmatched_df_t)
}
}
traceback()
View(joined_t)
data2[un,c("CTD_IDs")] = joined_t_p$CTD_ID}
data2[un,c("CTD_IDs")] = joined_t_p$CTD_ID
View(joined_t_p)
# join with data 2 IDs
joined_t = left_join(data.frame("STNCAST" = data2_stncast[un]),unmatched_df_t , by = "STNCAST")
View(unmatched_df_p)
# join with data 2 IDs
joined_t_p = left_join(joined_t,unmatched_df_p[,c("STNCAST","dist_min","d_diff")] , by = "STNCAST")
data2[un,c("CTD_IDs")] = joined_t_p$CTD_ID} ####
data2[un,c("CTD_IDs")] = joined_t_p$CTD_ID
View(data2)
write.csv(method_info, file=file.path("./product_data/supporting_information","BIOMATE_METHODS.txt"),row.names = F)
### save data
save(bib,source_info,method_info,platforms, countries,file =file.path("../Rpackage/data","BIOMATE.rda"))
### Compile package
roxygen2::roxygenise()
help("roxygenise")
### Compile package
roxygen2::roxygenise("../Rpackage")
### Compile package
roxygen2::roxygenise("../Rpackage")
### Compile package
roxygen2::roxygenise("../Rpackage")
### Compile package
roxygen2::roxygenise("../Rpackage")
### Compile package
roxygen2::roxygenise("../Rpackage")
library(dplyr)
library(tools)
library(data.table)
library(ncdf4)
library(readr)
library(geosphere)
library(stringi)
library(tidyr)
library(devtools)
#devtools::install_github("KimBaldry/BIOMATE-Rpackage")
library(BIOMATE)
BIOMATE::add_bibstyle()
devtools::install_github("KimBaldry/BIOMATE-Rpackage")
#devtools::install_github("KimBaldry/BIOMATE-Rpackage")
library(BIOMATE)
BIOM
path = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/Projects/BIO-MATE"
PROF_to_WHPE(path_out = file.path(path,"BIO-MATE","product_data","regression_test","reformatted_data"), file_path = file.path(path,"BIO-MATE","product_data","processing_metadata","regression_test"),userID = "IMASUTASKB")
bib[1]
print(bib[1], style = text, .bibstyle = "BIOMATE")
print(bib[1], style = "text", .bibstyle = "BIOMATE")
add_bibstyle <- function(){
BM = bibstyle(style = "text", .init = T)
BM$formatMisc <- function (paper)
{
result = paste(authorList(paper), " ", fmtYear(paper$year), " ", fmtTitle(paper$title), " ", paper$publisher, ". ", sep = "")
if(!is.null(paper$organization)){result = paste(result,  paper$organization,". ", sep = "")}
if(!is.null(paper$doi)){result = paste(result,  paper$doi,". ", sep = "")}
if(!is.null(paper$url)){result = paste(result,  paper$url,". ", sep = "")}
result
}
environment(BM$formatMisc) = BM
bibstyle("BIOMATE",BM)
print("BIOMATE style has been added.")
}
add_bibstyle()
print(bib[1], style = "text", .bibstyle = "BIOMATE")
A = print(bib[1], style = "text", .bibstyle = "BIOMATE")
A
A = format(bib[1], style = "text", .bibstyle = "BIOMATE")
A
### Compile package
roxygen2::roxygenise("../Rpackage")
### Compile package
roxygen2::roxygenise("../Rpackage")
devtools::install_github("KimBaldry/BIOMATE-Rpackage")
devtools::install_github("KimBaldry/BIOMATE-Rpackage",force = T)
library(dplyr)
library(tools)
library(data.table)
library(ncdf4)
library(readr)
library(geosphere)
library(stringi)
library(tidyr)
library(devtools)
#devtools::install_github("KimBaldry/BIOMATE-Rpackage")
library(BIOMATE)
BIOMATE::add_bibstyle()
path = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/Projects/BIO-MATE"
PROF_to_WHPE(path_out = file.path(path,"BIO-MATE","product_data","regression_test","reformatted_data"), file_path = file.path(path,"BIO-MATE","product_data","processing_metadata","regression_test"),userID = "IMASUTASKB")
traceback()
print(bib[1], style = "text", .bibstyle = "BIOMATE")
format(bib[1], style = "text", .bibstyle = "BIOMATE")
path = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/Projects/BIO-MATE"
PROF_to_WHPE(path_out = file.path(path,"BIO-MATE","product_data","regression_test","reformatted_data"), file_path = file.path(path,"BIO-MATE","product_data","processing_metadata","regression_test"),userID = "IMASUTASKB")
traceback()
devtools::install_github("KimBaldry/BIOMATE-Rpackage")
devtools::install_github("KimBaldry/BIOMATE-Rpackage", force = T)
library(dplyr)
library(tools)
library(data.table)
library(ncdf4)
library(readr)
library(geosphere)
library(stringi)
library(tidyr)
library(devtools)
#devtools::install_github("KimBaldry/BIOMATE-Rpackage")
library(BIOMATE)
library(dplyr)
library(tools)
library(data.table)
library(ncdf4)
library(readr)
library(geosphere)
library(stringi)
library(tidyr)
library(devtools)
#devtools::install_github("KimBaldry/BIOMATE-Rpackage")
library(BIOMATE)
path = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/Projects/BIO-MATE"
PROF_to_WHPE(path_out = file.path(path,"BIO-MATE","product_data","regression_test","reformatted_data"), file_path = file.path(path,"BIO-MATE","product_data","processing_metadata","regression_test"),userID = "IMASUTASKB")
traceback()
### Compile package
roxygen2::roxygenise("../Rpackage")
install.packages("beepr")
beep()
library(beepr)
beep()
beep()
beep(sound = 3)
