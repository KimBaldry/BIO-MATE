unmatched_df_t = unmatched_df_t %>% filter(!is.na(closest_t), t_diff < t_thresh)
# Any matches?
if(nrow(unmatched_df_t) > 0){
# get CTD_IDs
unmatched_df_t$CTD_ID = unlist(lapply(1:nrow(unmatched_df_t),function(x){r = CTD_df_sub$CTD_ID[unmatched_df_t$closest_t[x]%%nrow(CTD_df_sub)]
if(is.empty(r)){r = CTD_df_sub$CTD_ID[nrow(CTD_df_sub)]}
return(r)}))
# join with data 2 IDs
joined_t = left_join(data.frame("STNCAST" = data2_stncast),unmatched_df_t , by = "STNCAST")
}}
# match with closest lat/lon on same date
d_calc = lapply(1:nrow(unmatched_df_p), calc.dist.min)
unmatched_df_p$dist_min  = unlist(lapply(d_calc,"[","min"))
unmatched_df_p$d_diff = unlist(lapply(d_calc,"[","diff"))
nrow(unmatched_df_p) > 0 & notime
notime
nrow(unmatched_df_p) > 0
# get CTD_ID
unmatched_df_p$CTD_ID = unlist(lapply(1:nrow(unmatched_df_p),function(x){CTD_df_sub$CTD_ID[unmatched_df_p$dist_min[x]]}))
# join with data 2 IDs
joined_p = left_join(data.frame("STNCAST" = data2_stncast),unmatched_df_p , by = "STNCAST")
help("left_join")
A=data.frame("STNCAST" = data2_stncast)
View(joined_p)
# join with data 2 IDs
joined_p = left_join(data.frame("STNCAST" = data2_stncast),unmatched_df_p , by = c("STNCAST"))
data2_stncast
unmatched_df_p[,c("STNCAST","dist_min","d_diff")]
# join with data 2 IDs
joined_t_p = left_join(joined_t,unmatched_df_p[,c("STNCAST","dist_min","d_diff")] , by = "STNCAST")
df1 <- data.frame(col1 = LETTERS[1:4],
col2 = 1:4)
df2 <- data.frame(col1 = rep(LETTERS[1:2], 2),
col3 = 4:1)
df1
df2
# join with data 2 IDs
joined_p = left_join(data.frame("STNCAST" = data2_stncast),unmatched_df_p , by = c("STNCAST"))
# join with data 2 IDs
joined_p = left_join(data.frame("STNCAST" = data2_stncast),unmatched_df_p[,64:68] , by = c("STNCAST"))
# join with data 2 IDs
joined_p = left_join(data.frame("STNCAST" = data2_stncast),unmatched_df_p[,64] , by = c("STNCAST"))
# join with data 2 IDs
joined_p = left_join(data.frame("STNCAST" = data2_stncast),unmatched_df_p[,64:65] , by = c("STNCAST"))
View(joined_p)
View(unmatched_df_p)
View(pig_data)
which(pig_data$STN == "U" & pig_data$CTD_IDs != "U")
t_thresh = 6
d_thresh = 1000
# CTD data exists?. Closest position and closest times?
pig_data$PROF_data = NA
pig_data$d_diff = NA
pig_data$t_diff = NA
sub_prof_files = prof_files[which(substr(prof_files,1,12) == ex)]
sub_pig_data = pig_data %>% filter(EXPOCODE == ex) %>% mutate(STNCAST = paste(STNNBR_analyser,CASTNO_analyser))
data2_stncast = paste(sub_pig_data$STNNBR_analyser,sub_pig_data$CASTNO_analyser)
sub_pig_data = sub_pig_data[!duplicated(sub_pig_data$STNCAST),]
pig_data$PROF_data[which(pig_data$EXPOCODE == ex)] = length(sub_prof_files) != 0
CTD_df_sub = CTD_df %>% filter(substr(prof_files,1,12) == ex)
# ctd_ids from CTD files
CTD_IDs = unlist(strsplit(sub_prof_files,"_ctd1.csv"))
# create a data frame with split info
ctd_split = strsplit(CTD_IDs, split = "_")
CTD_info = data.frame("CTD_ID" = CTD_IDs, "EXPOCODE" = sapply(ctd_split, "[[", 1), "STNNBR" = sapply(ctd_split, "[[", 3), "CASTNO"= sapply(ctd_split, "[[", 4), stringsAsFactors = F)
unmatched_df_t = sub_pig_data %>% filter(!is.na(TIME_analyser), !is.empty(TIME_analyser), !is.empty(DATE_analyser))
unmatched_df_t = unmatched_df_t[,c(1:64,67)] %>%
mutate(time_m = as.POSIXct(paste(DATE_analyser,TIME_analyser), format = "%Y-%m-%d %H:%M:%S", tz = "UTC"))
notime = ifelse(nrow(unmatched_df_t) == 0,T,F)
unmatched_df_p = sub_pig_data %>% filter(!is.na(LAT_analyser))
unmatched_df_p = unmatched_df_p[,c(1:64,67)]
nopos = ifelse(nrow(unmatched_df_p) == 0,T,F)
### match closest times
col_t = c(3:5)[!colSums(is.na(CTD_df_sub[3:5])) == nrow(CTD_df_sub)]
if(!notime){
#calculate time differences
unmatched_df_t$closest_t = unlist(lapply(1:nrow(unmatched_df_t), calc.time.min))
unmatched_df_t$t_diff = unlist(lapply(1:nrow(unmatched_df_t), calc.time.diff))
# check it is within 3 hours and assign CTD_ID
unmatched_df_t = unmatched_df_t %>% filter(!is.na(closest_t), t_diff < t_thresh)
# Any matches?
if(nrow(unmatched_df_t) > 0){
# get CTD_IDs
unmatched_df_t$CTD_ID = unlist(lapply(1:nrow(unmatched_df_t),function(x){r = CTD_df_sub$CTD_ID[unmatched_df_t$closest_t[x]%%nrow(CTD_df_sub)]
if(is.empty(r)){r = CTD_df_sub$CTD_ID[nrow(CTD_df_sub)]}
return(r)}))
# join with data 2 IDs
joined_t = left_join(data.frame("STNCAST" = data2_stncast),unmatched_df_t , by = "STNCAST")
}}
# match with closest lat/lon on same date
d_calc = lapply(1:nrow(unmatched_df_p), calc.dist.min)
unmatched_df_p$dist_min  = unlist(lapply(d_calc,"[","min"))
unmatched_df_p$d_diff = unlist(lapply(d_calc,"[","diff"))
if(nrow(unmatched_df_p) > 0 & notime){
# if no time matches consider date of position matches.
unmatched_df_p = unmatched_df_p %>% mutate(Date_match = ifelse(Date == CTD_df_sub$DATE[dist_min],T,F))
unmatched_df_p = unmatched_df_p %>% filter(Date_match)
}
if(nrow(unmatched_df_p) > 0){
# get CTD_ID
unmatched_df_p$CTD_ID = unlist(lapply(1:nrow(unmatched_df_p),function(x){CTD_df_sub$CTD_ID[unmatched_df_p$dist_min[x]]}))
# join with data 2 IDs
joined_p = left_join(data.frame("STNCAST" = data2_stncast),unmatched_df_p[,64:65] , by = c("STNCAST"))
if(exists("joined_t")){
# join with data 2 IDs
## needs unique join columns. need to check if OK in PIG_to_WHPE
joined_t_p = left_join(joined_t,unmatched_df_p[,c("STNCAST","dist_min","d_diff")] , by = "STNCAST")
rm(joined_t)
}else{joined_t_p = joined_p
rm(joined_p)}
}
if(any(grepl(pattern = "d_diff", colnames(joined_t_p)))){
pig_data$d_diff[pig_data$EXPOCODE == ex] = joined_t_p$d_diff
}
if(any(grepl(pattern = "t_diff", colnames(joined_t_p)))){
pig_data$t_diff[pig_data$EXPOCODE == ex] = joined_t_p$t_diff}
t_thresh = 6
d_thresh = 1000
# this small function prevents the drop of midnight 00:00:00
calc.dist.min = function(x){
mins = which.min(distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[,c("LON","LAT")])))[1]
dists = distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[mins,c("LON","LAT")]))
if(any(!is.na(CTD_df$LON_b))){
minb = which.min(distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[,c("LON_b","LAT_b")])))[1]
mins = c(mins, minb)
distb = distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[minb,c("LON_b","LAT_b")]))
dists = c(dists, distb)}
if(any(!is.na(CTD_df$LON_e))){
mine = which.min(distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[,c("LON_e","LAT_e")])))[1]
mins = c(mins, mine)
diste = distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[mine,c("LON_e","LAT_e")]))
dists = c(dists, diste)}
data.frame(min = mins[which.min(dists)],diff = dists[which.min(dists)])
}
#calc.dist.diff = function(x){distGeo(c(unmatched_df_p$LON[x], unmatched_df_p$LAT[x]), as.matrix(CTD_df[unmatched_df_p$dist_min[x],c("LON","LAT")]))}
calc.time.min = function(x){which.min(abs(unlist(lapply(col_t, FUN = function(y){difftime(CTD_df[,y], unmatched_df_t$time_m[x], units = "secs")}))))[1]}
calc.time.diff =  function(x){abs(unlist(lapply(col_t, FUN = function(y){difftime(CTD_df[,y], unmatched_df_t$time_m[x], units = "secs")})))[unmatched_df_t$closest_t[x]]}
# CTD data exists?. Closest position and closest times?
pig_data$PROF_data = NA
pig_data$d_diff = NA
pig_data$t_diff = NA
for(ex in pig_expos){
sub_prof_files = prof_files[which(substr(prof_files,1,12) == ex)]
sub_pig_data = pig_data %>% filter(EXPOCODE == ex) %>% mutate(STNCAST = paste(STNNBR_analyser,CASTNO_analyser))
data2_stncast = paste(sub_pig_data$STNNBR_analyser,sub_pig_data$CASTNO_analyser)
sub_pig_data = sub_pig_data[!duplicated(sub_pig_data$STNCAST),]
pig_data$PROF_data[which(pig_data$EXPOCODE == ex)] = length(sub_prof_files) != 0
CTD_df_sub = CTD_df %>% filter(substr(prof_files,1,12) == ex)
if(length(sub_prof_files) > 0){
# ctd_ids from CTD files
CTD_IDs = unlist(strsplit(sub_prof_files,"_ctd1.csv"))
# create a data frame with split info
ctd_split = strsplit(CTD_IDs, split = "_")
CTD_info = data.frame("CTD_ID" = CTD_IDs, "EXPOCODE" = sapply(ctd_split, "[[", 1), "STNNBR" = sapply(ctd_split, "[[", 3), "CASTNO"= sapply(ctd_split, "[[", 4), stringsAsFactors = F)
unmatched_df_t = sub_pig_data %>% filter(!is.na(TIME_analyser), !is.empty(TIME_analyser), !is.empty(DATE_analyser))
unmatched_df_t = unmatched_df_t[,c(1:64,67)] %>%
mutate(time_m = as.POSIXct(paste(DATE_analyser,TIME_analyser), format = "%Y-%m-%d %H:%M:%S", tz = "UTC"))
notime = ifelse(nrow(unmatched_df_t) == 0,T,F)
unmatched_df_p = sub_pig_data %>% filter(!is.na(LAT_analyser))
unmatched_df_p = unmatched_df_p[,c(1:64,67)]
nopos = ifelse(nrow(unmatched_df_p) == 0,T,F)
### match closest times
col_t = c(3:5)[!colSums(is.na(CTD_df_sub[3:5])) == nrow(CTD_df_sub)]
if(!notime){
#calculate time differences
unmatched_df_t$closest_t = unlist(lapply(1:nrow(unmatched_df_t), calc.time.min))
unmatched_df_t$t_diff = unlist(lapply(1:nrow(unmatched_df_t), calc.time.diff))
# check it is within 3 hours and assign CTD_ID
unmatched_df_t = unmatched_df_t %>% filter(!is.na(closest_t), t_diff < t_thresh)
# Any matches?
if(nrow(unmatched_df_t) > 0){
# get CTD_IDs
unmatched_df_t$CTD_ID = unlist(lapply(1:nrow(unmatched_df_t),function(x){r = CTD_df_sub$CTD_ID[unmatched_df_t$closest_t[x]%%nrow(CTD_df_sub)]
if(is.empty(r)){r = CTD_df_sub$CTD_ID[nrow(CTD_df_sub)]}
return(r)}))
# join with data 2 IDs
joined_t = left_join(data.frame("STNCAST" = data2_stncast),unmatched_df_t , by = "STNCAST")
}}
### match closest positions
# match with closest lat/lon on same date
d_calc = lapply(1:nrow(unmatched_df_p), calc.dist.min)
unmatched_df_p$dist_min  = unlist(lapply(d_calc,"[","min"))
unmatched_df_p$d_diff = unlist(lapply(d_calc,"[","diff"))
# check within distance threshold
#unmatched_df_p  = unmatched_df_p %>% filter(d_diff < d_thresh)
# Any matches?
if(nrow(unmatched_df_p) > 0 & notime){
# if no time matches consider date of position matches.
unmatched_df_p = unmatched_df_p %>% mutate(Date_match = ifelse(Date == CTD_df_sub$DATE[dist_min],T,F))
unmatched_df_p = unmatched_df_p %>% filter(Date_match)
}
if(nrow(unmatched_df_p) > 0){
# get CTD_ID
unmatched_df_p$CTD_ID = unlist(lapply(1:nrow(unmatched_df_p),function(x){CTD_df_sub$CTD_ID[unmatched_df_p$dist_min[x]]}))
# join with data 2 IDs
joined_p = left_join(data.frame("STNCAST" = data2_stncast),unmatched_df_p[,64:65] , by = c("STNCAST"))
if(exists("joined_t")){
# join with data 2 IDs
## needs unique join columns. need to check if OK in PIG_to_WHPE
joined_t_p = left_join(joined_t,unmatched_df_p[,c("STNCAST","dist_min","d_diff")] , by = "STNCAST")
rm(joined_t)
}else{joined_t_p = joined_p
rm(joined_p)}
}
if(any(grepl(pattern = "d_diff", colnames(joined_t_p)))){
pig_data$d_diff[pig_data$EXPOCODE == ex] = joined_t_p$d_diff
}
if(any(grepl(pattern = "t_diff", colnames(joined_t_p)))){
pig_data$t_diff[pig_data$EXPOCODE == ex] = joined_t_p$t_diff}
rm(joined_t_p)
}}
traceback()
ex
nopos
View(sub_pig_data)
t_thresh = 6
d_thresh = 1000
# this small function prevents the drop of midnight 00:00:00
calc.dist.min = function(x){
mins = which.min(distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[,c("LON","LAT")])))[1]
dists = distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[mins,c("LON","LAT")]))
if(any(!is.na(CTD_df$LON_b))){
minb = which.min(distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[,c("LON_b","LAT_b")])))[1]
mins = c(mins, minb)
distb = distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[minb,c("LON_b","LAT_b")]))
dists = c(dists, distb)}
if(any(!is.na(CTD_df$LON_e))){
mine = which.min(distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[,c("LON_e","LAT_e")])))[1]
mins = c(mins, mine)
diste = distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[mine,c("LON_e","LAT_e")]))
dists = c(dists, diste)}
data.frame(min = mins[which.min(dists)],diff = dists[which.min(dists)])
}
#calc.dist.diff = function(x){distGeo(c(unmatched_df_p$LON[x], unmatched_df_p$LAT[x]), as.matrix(CTD_df[unmatched_df_p$dist_min[x],c("LON","LAT")]))}
calc.time.min = function(x){which.min(abs(unlist(lapply(col_t, FUN = function(y){difftime(CTD_df[,y], unmatched_df_t$time_m[x], units = "secs")}))))[1]}
calc.time.diff =  function(x){abs(unlist(lapply(col_t, FUN = function(y){difftime(CTD_df[,y], unmatched_df_t$time_m[x], units = "secs")})))[unmatched_df_t$closest_t[x]]}
# CTD data exists?. Closest position and closest times?
pig_data$PROF_data = NA
pig_data$d_diff = NA
pig_data$t_diff = NA
for(ex in pig_expos){
sub_prof_files = prof_files[which(substr(prof_files,1,12) == ex)]
sub_pig_data = pig_data %>% filter(EXPOCODE == ex) %>% mutate(STNCAST = paste(STNNBR_analyser,CASTNO_analyser))
data2_stncast = paste(sub_pig_data$STNNBR_analyser,sub_pig_data$CASTNO_analyser)
sub_pig_data = sub_pig_data[!duplicated(sub_pig_data$STNCAST),]
pig_data$PROF_data[which(pig_data$EXPOCODE == ex)] = length(sub_prof_files) != 0
CTD_df_sub = CTD_df %>% filter(substr(prof_files,1,12) == ex)
if(length(sub_prof_files) > 0){
# ctd_ids from CTD files
CTD_IDs = unlist(strsplit(sub_prof_files,"_ctd1.csv"))
# create a data frame with split info
ctd_split = strsplit(CTD_IDs, split = "_")
CTD_info = data.frame("CTD_ID" = CTD_IDs, "EXPOCODE" = sapply(ctd_split, "[[", 1), "STNNBR" = sapply(ctd_split, "[[", 3), "CASTNO"= sapply(ctd_split, "[[", 4), stringsAsFactors = F)
unmatched_df_t = sub_pig_data %>% filter(!is.na(TIME_analyser), !is.empty(TIME_analyser), !is.empty(DATE_analyser))
unmatched_df_t = unmatched_df_t[,c(1:64,67)] %>%
mutate(time_m = as.POSIXct(paste(DATE_analyser,TIME_analyser), format = "%Y-%m-%d %H:%M:%S", tz = "UTC"))
notime = ifelse(nrow(unmatched_df_t) == 0,T,F)
unmatched_df_p = sub_pig_data %>% filter(!is.na(LAT_analyser))
unmatched_df_p = unmatched_df_p[,c(1:64,67)]
nopos = ifelse(nrow(unmatched_df_p) == 0,T,F)
if(!nopos){
### match closest times
col_t = c(3:5)[!colSums(is.na(CTD_df_sub[3:5])) == nrow(CTD_df_sub)]
if(!notime){
#calculate time differences
unmatched_df_t$closest_t = unlist(lapply(1:nrow(unmatched_df_t), calc.time.min))
unmatched_df_t$t_diff = unlist(lapply(1:nrow(unmatched_df_t), calc.time.diff))
# check it is within 3 hours and assign CTD_ID
unmatched_df_t = unmatched_df_t %>% filter(!is.na(closest_t), t_diff < t_thresh)
# Any matches?
if(nrow(unmatched_df_t) > 0){
# get CTD_IDs
unmatched_df_t$CTD_ID = unlist(lapply(1:nrow(unmatched_df_t),function(x){r = CTD_df_sub$CTD_ID[unmatched_df_t$closest_t[x]%%nrow(CTD_df_sub)]
if(is.empty(r)){r = CTD_df_sub$CTD_ID[nrow(CTD_df_sub)]}
return(r)}))
# join with data 2 IDs
joined_t = left_join(data.frame("STNCAST" = data2_stncast),unmatched_df_t , by = "STNCAST")
}}
### match closest positions
# match with closest lat/lon on same date
d_calc = lapply(1:nrow(unmatched_df_p), calc.dist.min)
unmatched_df_p$dist_min  = unlist(lapply(d_calc,"[","min"))
unmatched_df_p$d_diff = unlist(lapply(d_calc,"[","diff"))
# check within distance threshold
#unmatched_df_p  = unmatched_df_p %>% filter(d_diff < d_thresh)
# Any matches?
if(nrow(unmatched_df_p) > 0 & notime){
# if no time matches consider date of position matches.
unmatched_df_p = unmatched_df_p %>% mutate(Date_match = ifelse(Date == CTD_df_sub$DATE[dist_min],T,F))
unmatched_df_p = unmatched_df_p %>% filter(Date_match)
}
if(nrow(unmatched_df_p) > 0){
# get CTD_ID
unmatched_df_p$CTD_ID = unlist(lapply(1:nrow(unmatched_df_p),function(x){CTD_df_sub$CTD_ID[unmatched_df_p$dist_min[x]]}))
# join with data 2 IDs
joined_p = left_join(data.frame("STNCAST" = data2_stncast),unmatched_df_p[,64:65] , by = c("STNCAST"))
if(exists("joined_t")){
# join with data 2 IDs
## needs unique join columns. need to check if OK in PIG_to_WHPE
joined_t_p = left_join(joined_t,unmatched_df_p[,c("STNCAST","dist_min","d_diff")] , by = "STNCAST")
rm(joined_t)
}else{joined_t_p = joined_p
rm(joined_p)}
}
if(any(grepl(pattern = "d_diff", colnames(joined_t_p)))){
pig_data$d_diff[pig_data$EXPOCODE == ex] = joined_t_p$d_diff
}
if(any(grepl(pattern = "t_diff", colnames(joined_t_p)))){
pig_data$t_diff[pig_data$EXPOCODE == ex] = joined_t_p$t_diff}
rm(joined_t_p)
}}}
traceback()
t_thresh = 6
d_thresh = 1000
# this small function prevents the drop of midnight 00:00:00
calc.dist.min = function(x){
mins = which.min(distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[,c("LON","LAT")])))[1]
dists = distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[mins,c("LON","LAT")]))
if(any(!is.na(CTD_df$LON_b))){
minb = which.min(distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[,c("LON_b","LAT_b")])))[1]
mins = c(mins, minb)
distb = distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[minb,c("LON_b","LAT_b")]))
dists = c(dists, distb)}
if(any(!is.na(CTD_df$LON_e))){
mine = which.min(distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[,c("LON_e","LAT_e")])))[1]
mins = c(mins, mine)
diste = distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[mine,c("LON_e","LAT_e")]))
dists = c(dists, diste)}
data.frame(min = mins[which.min(dists)],diff = dists[which.min(dists)])
}
#calc.dist.diff = function(x){distGeo(c(unmatched_df_p$LON[x], unmatched_df_p$LAT[x]), as.matrix(CTD_df[unmatched_df_p$dist_min[x],c("LON","LAT")]))}
calc.time.min = function(x){which.min(abs(unlist(lapply(col_t, FUN = function(y){difftime(CTD_df[,y], unmatched_df_t$time_m[x], units = "secs")}))))[1]}
calc.time.diff =  function(x){abs(unlist(lapply(col_t, FUN = function(y){difftime(CTD_df[,y], unmatched_df_t$time_m[x], units = "secs")})))[unmatched_df_t$closest_t[x]]}
# CTD data exists?. Closest position and closest times?
pig_data$PROF_data = NA
pig_data$d_diff = NA
pig_data$t_diff = NA
for(ex in pig_expos){
sub_prof_files = prof_files[which(substr(prof_files,1,12) == ex)]
sub_pig_data = pig_data %>% filter(EXPOCODE == ex) %>% mutate(STNCAST = paste(STNNBR_analyser,CASTNO_analyser))
data2_stncast = paste(sub_pig_data$STNNBR_analyser,sub_pig_data$CASTNO_analyser)
sub_pig_data = sub_pig_data[!duplicated(sub_pig_data$STNCAST),]
pig_data$PROF_data[which(pig_data$EXPOCODE == ex)] = length(sub_prof_files) != 0
CTD_df_sub = CTD_df %>% filter(substr(prof_files,1,12) == ex)
if(length(sub_prof_files) > 0){
# ctd_ids from CTD files
CTD_IDs = unlist(strsplit(sub_prof_files,"_ctd1.csv"))
# create a data frame with split info
ctd_split = strsplit(CTD_IDs, split = "_")
CTD_info = data.frame("CTD_ID" = CTD_IDs, "EXPOCODE" = sapply(ctd_split, "[[", 1), "STNNBR" = sapply(ctd_split, "[[", 3), "CASTNO"= sapply(ctd_split, "[[", 4), stringsAsFactors = F)
unmatched_df_t = sub_pig_data %>% filter(!is.na(TIME_analyser), !is.empty(TIME_analyser), !is.empty(DATE_analyser))
unmatched_df_t = unmatched_df_t[,c(1:64,67)] %>%
mutate(time_m = as.POSIXct(paste(DATE_analyser,TIME_analyser), format = "%Y-%m-%d %H:%M:%S", tz = "UTC"))
notime = ifelse(nrow(unmatched_df_t) == 0,T,F)
unmatched_df_p = sub_pig_data %>% filter(!is.na(LAT_analyser))
unmatched_df_p = unmatched_df_p[,c(1:64,67)]
nopos = ifelse(nrow(unmatched_df_p) == 0,T,F)
if(!nopos){
### match closest times
col_t = c(3:5)[!colSums(is.na(CTD_df_sub[3:5])) == nrow(CTD_df_sub)]
if(!notime){
#calculate time differences
unmatched_df_t$closest_t = unlist(lapply(1:nrow(unmatched_df_t), calc.time.min))
unmatched_df_t$t_diff = unlist(lapply(1:nrow(unmatched_df_t), calc.time.diff))
# check it is within 3 hours and assign CTD_ID
unmatched_df_t = unmatched_df_t %>% filter(!is.na(closest_t), t_diff < t_thresh)
# Any matches?
if(nrow(unmatched_df_t) > 0){
# get CTD_IDs
unmatched_df_t$CTD_ID = unlist(lapply(1:nrow(unmatched_df_t),function(x){r = CTD_df_sub$CTD_ID[unmatched_df_t$closest_t[x]%%nrow(CTD_df_sub)]
if(is.empty(r)){r = CTD_df_sub$CTD_ID[nrow(CTD_df_sub)]}
return(r)}))
# join with data 2 IDs
joined_t = left_join(data.frame("STNCAST" = data2_stncast),unmatched_df_t , by = "STNCAST")
}}
### match closest positions
# match with closest lat/lon on same date
d_calc = lapply(1:nrow(unmatched_df_p), calc.dist.min)
unmatched_df_p$dist_min  = unlist(lapply(d_calc,"[","min"))
unmatched_df_p$d_diff = unlist(lapply(d_calc,"[","diff"))
# check within distance threshold
#unmatched_df_p  = unmatched_df_p %>% filter(d_diff < d_thresh)
# Any matches?
if(nrow(unmatched_df_p) > 0 & notime){
# if no time matches consider date of position matches.
unmatched_df_p = unmatched_df_p %>% mutate(Date_match = ifelse(DATE_analyser == CTD_df_sub$DATE[dist_min],T,F))
unmatched_df_p = unmatched_df_p %>% filter(Date_match)
}
if(nrow(unmatched_df_p) > 0){
# get CTD_ID
unmatched_df_p$CTD_ID = unlist(lapply(1:nrow(unmatched_df_p),function(x){CTD_df_sub$CTD_ID[unmatched_df_p$dist_min[x]]}))
# join with data 2 IDs
joined_p = left_join(data.frame("STNCAST" = data2_stncast),unmatched_df_p[,64:65] , by = c("STNCAST"))
if(exists("joined_t")){
# join with data 2 IDs
## needs unique join columns. need to check if OK in PIG_to_WHPE
joined_t_p = left_join(joined_t,unmatched_df_p[,c("STNCAST","dist_min","d_diff")] , by = "STNCAST")
rm(joined_t)
}else{joined_t_p = joined_p
rm(joined_p)}
}
if(any(grepl(pattern = "d_diff", colnames(joined_t_p)))){
pig_data$d_diff[pig_data$EXPOCODE == ex] = joined_t_p$d_diff
}
if(any(grepl(pattern = "t_diff", colnames(joined_t_p)))){
pig_data$t_diff[pig_data$EXPOCODE == ex] = joined_t_p$t_diff}
rm(joined_t_p)
}}}
traceback()
nopos
notime
View(sub_pig_data)
t_thresh = 6
d_thresh = 1000
# this small function prevents the drop of midnight 00:00:00
calc.dist.min = function(x){
mins = which.min(distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[,c("LON","LAT")])))[1]
dists = distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[mins,c("LON","LAT")]))
if(any(!is.na(CTD_df$LON_b))){
minb = which.min(distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[,c("LON_b","LAT_b")])))[1]
mins = c(mins, minb)
distb = distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[minb,c("LON_b","LAT_b")]))
dists = c(dists, distb)}
if(any(!is.na(CTD_df$LON_e))){
mine = which.min(distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[,c("LON_e","LAT_e")])))[1]
mins = c(mins, mine)
diste = distGeo(c(unmatched_df_p$LON_analyser[x], unmatched_df_p$LAT_analyser[x]), as.matrix(CTD_df[mine,c("LON_e","LAT_e")]))
dists = c(dists, diste)}
data.frame(min = mins[which.min(dists)],diff = dists[which.min(dists)])
}
#calc.dist.diff = function(x){distGeo(c(unmatched_df_p$LON[x], unmatched_df_p$LAT[x]), as.matrix(CTD_df[unmatched_df_p$dist_min[x],c("LON","LAT")]))}
calc.time.min = function(x){which.min(abs(unlist(lapply(col_t, FUN = function(y){difftime(CTD_df[,y], unmatched_df_t$time_m[x], units = "secs")}))))[1]}
calc.time.diff =  function(x){abs(unlist(lapply(col_t, FUN = function(y){difftime(CTD_df[,y], unmatched_df_t$time_m[x], units = "secs")})))[unmatched_df_t$closest_t[x]]}
# CTD data exists?. Closest position and closest times?
pig_data$PROF_data = NA
pig_data$d_diff = NA
pig_data$t_diff = NA
for(ex in pig_expos){
sub_prof_files = prof_files[which(substr(prof_files,1,12) == ex)]
sub_pig_data = pig_data %>% filter(EXPOCODE == ex) %>% mutate(STNCAST = paste(STNNBR_analyser,CASTNO_analyser))
data2_stncast = paste(sub_pig_data$STNNBR_analyser,sub_pig_data$CASTNO_analyser)
sub_pig_data = sub_pig_data[!duplicated(sub_pig_data$STNCAST),]
pig_data$PROF_data[which(pig_data$EXPOCODE == ex)] = length(sub_prof_files) != 0
CTD_df_sub = CTD_df %>% filter(substr(prof_files,1,12) == ex)
if(length(sub_prof_files) > 0){
# ctd_ids from CTD files
CTD_IDs = unlist(strsplit(sub_prof_files,"_ctd1.csv"))
# create a data frame with split info
ctd_split = strsplit(CTD_IDs, split = "_")
CTD_info = data.frame("CTD_ID" = CTD_IDs, "EXPOCODE" = sapply(ctd_split, "[[", 1), "STNNBR" = sapply(ctd_split, "[[", 3), "CASTNO"= sapply(ctd_split, "[[", 4), stringsAsFactors = F)
unmatched_df_t = sub_pig_data %>% filter(!is.na(TIME_analyser), !is.empty(TIME_analyser), !is.empty(DATE_analyser))
unmatched_df_t = unmatched_df_t[,c(1:64,67)] %>%
mutate(time_m = as.POSIXct(paste(DATE_analyser,TIME_analyser), format = "%Y-%m-%d %H:%M:%S", tz = "UTC"))
notime = ifelse(nrow(unmatched_df_t) == 0,T,F)
unmatched_df_p = sub_pig_data %>% filter(!is.na(LAT_analyser))
unmatched_df_p = unmatched_df_p[,c(1:64,67)]
nopos = ifelse(nrow(unmatched_df_p) == 0,T,F)
if(!nopos){
### match closest times
col_t = c(3:5)[!colSums(is.na(CTD_df_sub[3:5])) == nrow(CTD_df_sub)]
if(!notime){
#calculate time differences
unmatched_df_t$closest_t = unlist(lapply(1:nrow(unmatched_df_t), calc.time.min))
unmatched_df_t$t_diff = unlist(lapply(1:nrow(unmatched_df_t), calc.time.diff))
# check it is within 3 hours and assign CTD_ID
unmatched_df_t = unmatched_df_t %>% filter(!is.na(closest_t), t_diff < t_thresh)
# Any matches?
if(nrow(unmatched_df_t) > 0){
# get CTD_IDs
unmatched_df_t$CTD_ID = unlist(lapply(1:nrow(unmatched_df_t),function(x){r = CTD_df_sub$CTD_ID[unmatched_df_t$closest_t[x]%%nrow(CTD_df_sub)]
if(is.empty(r)){r = CTD_df_sub$CTD_ID[nrow(CTD_df_sub)]}
return(r)}))
# join with data 2 IDs
joined_t = left_join(data.frame("STNCAST" = data2_stncast),unmatched_df_t , by = "STNCAST")
}}
### match closest positions
# match with closest lat/lon on same date
d_calc = lapply(1:nrow(unmatched_df_p), calc.dist.min)
unmatched_df_p$dist_min  = unlist(lapply(d_calc,"[","min"))
unmatched_df_p$d_diff = unlist(lapply(d_calc,"[","diff"))
# check within distance threshold
#unmatched_df_p  = unmatched_df_p %>% filter(d_diff < d_thresh)
# Any matches?
if(nrow(unmatched_df_p) > 0 & notime){
# if no time matches consider date of position matches.
unmatched_df_p = unmatched_df_p %>% mutate(Date_match = ifelse(DATE_analyser == CTD_df_sub$DATE[dist_min],T,F))
unmatched_df_p = unmatched_df_p %>% filter(Date_match)
}
if(nrow(unmatched_df_p) > 0){
# get CTD_ID
unmatched_df_p$CTD_ID = unlist(lapply(1:nrow(unmatched_df_p),function(x){CTD_df_sub$CTD_ID[unmatched_df_p$dist_min[x]]}))
# join with data 2 IDs
joined_p = left_join(data.frame("STNCAST" = data2_stncast),unmatched_df_p[,64:65] , by = c("STNCAST"))
if(exists("joined_t")){
# join with data 2 IDs
## needs unique join columns. need to check if OK in PIG_to_WHPE
joined_t_p = left_join(joined_t,unmatched_df_p[,c("STNCAST","dist_min","d_diff")] , by = "STNCAST")
rm(joined_t)
}else{joined_t_p = joined_p
rm(joined_p)}
}
if(any(grepl(pattern = "d_diff", colnames(joined_t_p)))){
pig_data$d_diff[pig_data$EXPOCODE == ex] = joined_t_p$d_diff
}
if(any(grepl(pattern = "t_diff", colnames(joined_t_p)))){
pig_data$t_diff[pig_data$EXPOCODE == ex] = joined_t_p$t_diff}
rm(joined_t_p)
}}}
sub_pig_data = pig_data %>% filter(EXPOCODE == ex) %>% mutate(STNCAST = paste(STNNBR_analyser,CASTNO_analyser))
View(sub_pig_data)
ex
save(pig_data, CTD_df,pig_expos,prof_expos,all_expos,file = "Analysis_data.Rda")
