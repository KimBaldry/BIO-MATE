}else{t_diff_e = NA}
# bottom and end CTD pos information
if(!is.na(lat_b) & !is.na(lon_b)){
distGeo(c(lon, lat), c(lon_b,lat_b))
}else{pos_diff_b = NA}
if(!is.na(lat_e) & !is.na(lon_e)){
distGeo(c(lon, lat), c(lon_e,lat_e))
}else{pos_diff_e = NA}
prof_data = as.data.frame(fread(ctd_file,strip.white = T , stringsAsFactors = F, skip = n+1,na.strings =  "-999"))
f_headers = as.character(fread(ctd_file,stringsAsFactors = F, skip = n-1, nrows = 1, header = F))
colnames(prof_data) = f_headers
# convert to depth
prof_data$DEPTH = swDepth(prof_data$CTDPRS, latitude = lat)
if(any(grepl("CTDSAL",f_headers))){prof_data$CTDSAL = as.numeric(prof_data$CTDSAL)}
if(any(grepl("CTDTMP",f_headers))){prof_data$CTDTMP = as.numeric(prof_data$CTDTMP)}
if(any(grepl("CTDSAL",f_headers)) & any(grepl("CTDTMP",f_headers))){
sdx = which(is.finite(prof_data$CTDSAL) & is.finite(prof_data$CTDTMP))
if(length(sdx) > 0 ){
DEPTH_s = prof_data$DEPTH[sdx[1]]}else{DEPTH_s = NA}
}else{sdx = 1}
if(any(grepl("CTDSAL",f_headers)) & any(!is.na(prof_data$CTDSAL))){
CTDSAL_s = prof_data$CTDSAL[sdx[1]]
CTDSAL_5 = mean_5m(prof_data$DEPTH[which(is.finite(prof_data$CTDSAL))], prof_data$CTDSAL[which(is.finite(prof_data$CTDSAL))],2.5)
}else{CTDSAL_s = NA
CTDSAL_5 = NA}
if(any(grepl("CTDTMP",f_headers))& any(!is.na(prof_data$CTDTMP))){
CTDTEMP_s = prof_data$CTDTMP[sdx[1]]
CTDTEMP_5 = mean_5m(prof_data$DEPTH[which(is.finite(prof_data$CTDTMP))], prof_data$CTDTMP[which(is.finite(prof_data$CTDTMP))],2.5)
}else{CTDTEMP_s = NA
CTDTEMP_5 = NA}
### MLD calculation - 0.03 density threshold - this is a typical definition of MLD for the SO
if(all(any(grepl("CTDPRS",f_headers)), any(grepl("CTDSAL",f_headers)), any(grepl("CTDTMP",f_headers)),!is.na(lat)) & length(which(prof_data$DEPTH[is.finite(prof_data$DEPTH) & is.finite(prof_data$CTDSAL) & is.finite(prof_data$CTDTMP)] > 10)) >= 2){
MLD_calc = MLD(prof_data$CTDPRS,prof_data$CTDSAL, prof_data$CTDTMP,lat = lat,dens_thresh = 0.03)
MLD_n = MLD_calc$MLD
MLD_FLAG = MLD_calc$FLAG
}else{MLD_n = NA
MLD_FLAG = NA}
# gather ctd information
CTD_df = CTD_df %>% add_row(CTD_ID = ctd, DATE = date, TIME_s = times[1], TIME_b= times[2], TIME_e= times[3], LAT = lat, LON = lon, LAT_b = lat_b, LON_b = lon_b, LAT_e = lat_e, LON_e = lon_e, T_diff_b = t_diff_b, T_diff_e = t_diff_e, POS_diff_b = pos_diff_b, POS_diff_e = pos_diff_e, BOT_DEPTH = max(prof_data$DEPTH, na.rm = T),DEPTH_s = DEPTH_s, CTDSAL_s = CTDSAL_s, CTDTEMP_s = CTDTEMP_s, CTDSAL_5 = CTDSAL_5, CTDTEMP_5 = CTDTEMP_5, MLD = MLD_n, MLD_FLAG = MLD_FLAG)
}
plot(CTD_df$T_diff_b, CTD_df$BOT_DEPTH)
View(CTD_df[which(CTD_df$T_diff_b >20000),])
View(pig_data[which(pig_data$EXPOCODE == "09SS19960416")])
View(pig_data[which(pig_data$EXPOCODE == "09SS19960416"),])
View(pig_data[which(pig_data$EXPOCODE == "09SS19960416"),])
View(pig_data[which(pig_data$EXPOCODE == "09SS19960416"),])
A = 7.94
B = "2010-01-01"
dt = paste(A,B)
dt
dt = paste(B,a)
dt = paste(B,A)
as.POSIXct(dt,format = paste("%Y-%m-%d","%H")
)
help("as.POSIXct")
dt
as.POSIXct(dt,format = paste("%Y-%m-%d","%k"))
help(chron::hours)
help("hours")
1.5%%1
devtools::install_github("KimBaldry/BIO-MATE", subdir = "Rpackage")
library(dplyr)
library(tools)
library(data.table)
library(ncdf4)
library(readr)
library(geosphere)
library(stringi)
library(tidyr)
library(devtools)
#devtools::install_github("KimBaldry/BIO-MATE", subdir = "Rpackage")
library(BIOMATE)
path = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/Projects/BIO-MATE/"
BIOMATE::PROF_to_WHPE(path_out = file.path(path,"reformatted_data"), file_path = file.path(path,"BIO-MATE","product_data","processing_metadata","regression_test"),userID = "IMASUTASKB")
path = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/Projects/BIO-MATE/"
PROF_to_WHPE(path_out = file.path(path,"reformatted_data"), file_path = file.path(path,"BIO-MATE","product_data","processing_metadata","C1"),userID = "IMASUTASKB")
path = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/Projects/BIO-MATE/"
BIOMATE::PROF_to_WHPE(path_out = file.path(path,"reformatted_data"), file_path = file.path(path,"BIO-MATE","product_data","processing_metadata","regression_test"),userID = "IMASUTASKB")
getwd()
path = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/Projects/BIO-MATE/"
BIOMATE::PROF_to_WHPE(path_out = file.path(path,"reformatted_data"), file_path = file.path(path,"BIO-MATE","product_data","processing_metadata","regression_test"),userID = "IMASUTASKB")
install.packages(RefManageR)
install.packages("RefManageR")
library(RefManageR)
testbib<- RefManageR::ReadBib("./Rpackage/inst/citations/06AQ19850103.bib", check = FALSE)
install.packages("bibtex")
library(bibtex)
testbib<- read.bib("./Rpackage/inst/citations/06AQ19850103.bib")
testbib
testbib2<- RefManageR::ReadBib("./Rpackage/inst/citations/06AQ19850103.bib", check = FALSE)
tag = "06AQ19850103_prof"
testbib[tag]
print(testbib[tag])
tag = "06AQ19850103_pig"
print(testbib[tag])
apa_style <- tools::bibstyle("apa", sortKeys = function(refs) seq_along(refs),
fmtPrefix = function(paper) paste0("[^", attr(paper,"key"), "]:"),
extraInfo = function(paper) paste0(paper$url, get_doi(paper)),
.init = TRUE)
RefManageR::PrintBibliography(testbib[tag], .opts = list(bib.style = "apa", sorting = ""))
apa_style <- tools::bibstyle("apa", sortKeys = function(refs) seq_along(refs),
fmtPrefix = function(paper) paste0("[^", attr(paper,"key"), "]:"),
extraInfo = function(paper) paste0(paper$url, get_doi(paper)),
.init = TRUE)
RefManageR::PrintBibliography(testbi, .opts = list(bib.style = "apa", sorting = ""))
RefManageR::PrintBibliography(testbib, .opts = list(bib.style = "apa", sorting = ""))
install("stevemisc")
install.packages("stevemisc")
library(stevemisc)
print_refs(testbib[tag], "apa-6th-edition.csl" )
write.bib(testbib[tag])
test = "@misc{06AQ19850103_prof,
author={Gerd {Rohardt}},
title={{Physical oceanography during POLARSTERN cruise ANT-III/3}},
year={2010},
doi={10.1594/PANGAEA.734977},
url={https://doi.org/10.1594/PANGAEA.734977},
organization={Alfred Wegener Institute, Helmholtz Centre for Polar and Marine Research, Bremerhaven},
type={data set},
publisher={PANGAEA}
}"
print_refs(test, "apa-6th-edition.csl" )
toBibtex(testbib[tag])
print(testbib[tag])
print(testbib[tag])
print(testbib["AQ19850103_prof"])
testbib<- read.bib("./Rpackage/inst/citations/06AQ19850103.bib")
print(testbib[tag])
testbib[tag]
library(bibtex)
testbib<- read.bib("./Rpackage/inst/citations/06AQ19850103.bib")
testbib$`06AQ19850103_prof`
testbib[`06AQ19850103_prof`]
testbib["06AQ19850103_prof"]
print(testbib["06AQ19850103_prof"])
help("toBibtex")
help("citation")
library(stevemisc)
print(testbib["06AQ19850103_prof"])
print_refs(toBibtex(testbib["06AQ19850103_prof"]))
library(RefManageR)
RefManageR::PrintBibliography(testbib)
RefManageR::NoCite(testbib)
print(testbib["06AQ19850103_prof"], style = "citation")
print(testbib["06AQ19850103_prof"], .bibstyle = "JSS")
formatMisc
formatMisc()
install.packages("tools")
install.packages("tools")
library(tools)
bibstyle()
bibstyle
getBibstyle()
getBibstyle
print(testbib["06AQ19850103_prof"], .bibstyle = "apa")
print(testbib["06AQ19850103_prof"], style = "apa")
print(testbib["06AQ19850103_prof"], style = "text")
print(testbib["06AQ19850103_prof"], style = "textVersio")
print(testbib["06AQ19850103_prof"], style = "textVersion")
bibstyle(style = "text")
bibstyle(style = "JSS")
bibstyle(.init = T)
bibstyle(style = "text", .init = T)
A = bibstyle(style = "text", .init = T)
A
print(testbib["06AQ19850103_prof"], bib.style = "numeric")
print(testbib["06AQ19850103_prof"], bib.style = "draft")
print(testbib["06AQ19850103_prof"], bib.style = "authortitle")
A$formatMisc()
A$formatMisc
A$extraInfo()
A$extraInfo
testbib[1]
testbib[1]$`06AQ19850103_prof`[[1]]
a = testbib[1]$`06AQ19850103_prof`
a
testbib[1][[1]]
testbib[1][[1]][[1]]
testbib[1]$`06AQ19850103_prof`$doi
testbib[1]$06AQ19850103_prof$doi
testbib[1]$doi
A$fmtDOI()
A$fmtDOI
A$fmtPrefix()
A$fmtPrefix
A$fmtHowpublished
A$formatMisc
A$bookPublisher
testbib[1]
A$sentence
A$formatMisc(testbib[1])
formatBIOMATE <- function (paper)
{
result = paste(authorList(paper), " (", paper$year, "): ", paper$title, ". ", paper$publisher, sep = "")
if(exists(paper$organisation)){result = paste(result, ",", paper$organisation, sep = "")}
if(exists(paper$doi)){result = paste(result, ",", paper$doi, sep = "")}
if(exists(paper$url)){result = paste(result, ",", paper$url, sep = "")}
result = paste(result, ".", sep = "")
}
formatBIOMATE(testbib[1])
A$authorList()
A$authorList
A$formatBIOMATE <- function (paper)
{
result = paste(authorList(paper), " (", paper$year, "): ", paper$title, ". ", paper$publisher, sep = "")
if(exists(paper$organisation)){result = paste(result, ",", paper$organisation, sep = "")}
if(exists(paper$doi)){result = paste(result, ",", paper$doi, sep = "")}
if(exists(paper$url)){result = paste(result, ",", paper$url, sep = "")}
result = paste(result, ".", sep = "")
}
formatBIOMATE(testbib[1])
A$formatBIOMATE(testbib[1])
A$formatBIOMATE()
A$formatBIOMATE
A$formatMisc
environment(formatBIOMATE) = A
formatBIOMATE(testbib[1])
A$formatBIOMATE <- function (paper)
{
result = paste(authorList(paper), " (", paper$year, "): ", paper$title, ". ", paper$publisher, sep = "")
if(exists(paper$organization)){result = paste(result, ",", paper$organization, sep = "")}
if(exists(paper$doi)){result = paste(result, ",", paper$doi, sep = "")}
if(exists(paper$url)){result = paste(result, ",", paper$url, sep = "")}
result = paste(result, ".", sep = "")
}
formatBIOMATE <- function (paper)
{
result = paste(authorList(paper), " (", paper$year, "): ", paper$title, ". ", paper$publisher, sep = "")
if(exists(paper$organization)){result = paste(result, ",", paper$organization, sep = "")}
if(exists(paper$doi)){result = paste(result, ",", paper$doi, sep = "")}
if(exists(paper$url)){result = paste(result, ",", paper$url, sep = "")}
result = paste(result, ".", sep = "")
}
environment(formatBIOMATE) = A
formatBIOMATE(testbib[1])
formatBIOMATE <- function (paper)
{
result = paste(authorList(paper), " (", paper$year, "): ", paper$title, ". ", paper$publisher, sep = "")
if(exists(paper$organization)){result = paste(result, ",", paper$organization, sep = "")}
if(exists(paper$doi)){result = paste(result, ",", paper$doi, sep = "")}
if(exists(paper$url)){result = paste(result, ",", paper$url, sep = "")}
result = paste(result, ".", sep = "")
return(result)
}
environment(formatBIOMATE) = A
formatBIOMATE(testbib[1])
A$formatMisc()
A$formatMisc
formatBIOMATE <- function (paper)
{
result = paste(authorList(paper), " ", fmtYear(paper$year), ": ", fmtTitle(paper$title), ". ", paper$publisher, sep = "")
if(exists(paper$organization)){result = paste(result, ",", paper$organization, sep = "")}
if(exists(paper$doi)){result = paste(result, ",", paper$doi, sep = "")}
if(exists(paper$url)){result = paste(result, ",", paper$url, sep = "")}
result = paste(result, ".", sep = "")
return(result)
}
environment(formatBIOMATE) = A
formatBIOMATE(testbib[1])
A$collapse
formatBIOMATE <- function (paper)
{
result = paste(authorList(paper), " ", fmtYear(paper$year), ": ", fmtTitle(paper$title), ". ", paper$publisher, sep = "")
if(exists(paper$organization)){result = paste(result, ",", paper$organization, sep = "")}
if(exists(paper$doi)){result = paste(result, ",", paper$doi, sep = "")}
if(exists(paper$url)){result = paste(result, ",", paper$url, sep = "")}
result = paste(result, ".", sep = "")
print(result)
}
formatBIOMATE(testbib[1])
environment(formatBIOMATE) = A
formatBIOMATE(testbib[1])
testbib[1]
testbib[3]
A$fmtDOI
A$fmtUrl
BM = bibstyle(style = "text", .init = T)
BM$formatMisc <- function (paper)
{
result = paste(authorList(paper), " ", fmtYear(paper$year), ": ", fmtTitle(paper$title), ". ", paper$publisher, sep = "")
if(exists(paper$organization)){result = paste(result, ",", paper$organization, sep = "")}
if(exists(paper$doi)){result = paste(result, ",", paper$doi, sep = "")}
if(exists(paper$url)){result = paste(result, ",", paper$url, sep = "")}
result = paste(result, ".", sep = "")
result
}
environment(BM$formatMisc) = BM
print(testbib[1], .bibstyle = BM)
BM = bibstyle(style = "text", .init = T)
print(testbib[1], .bibstyle = BM)
BM = bibstyle(style = "text", .init = T)
BM$formatMisc <- function (paper)
{
result = paste(authorList(paper), " ", fmtYear(paper$year), ": ", fmtTitle(paper$title), ". ", paper$publisher, sep = "")
if(exists(paper$organization)){result = paste(result, ",", paper$organization, sep = "")}
if(exists(paper$doi)){result = paste(result, ",", paper$doi, sep = "")}
if(exists(paper$url)){result = paste(result, ",", paper$url, sep = "")}
result = paste(result, ".", sep = "")
result
}
environment(BM$formatMisc) = BM
bibstyle("BIOMATE",BM)
print(testbib[1], .bibstyle = "BIOMATE")
exists(testbib[1]$organization)
exists("testbib[1]$organization")
is.null(testbib[1]$organization))
is.null(testbib[1]$organization)
names(testbib[1])
names(testbib[1]$`06AQ19850103_prof`)
names(testbib[1][[1]])
names(testbib[1][[]])
names(testbib[1][[1]][[]])
names(testbib[1][[1]][[1]])
names(testbib[1])
names(testbib[[1]])
names(testbib[[1]][[1]])
exists("organization", where = testbib[1])
BM = bibstyle(style = "text", .init = T)
BM$formatMisc <- function (paper)
{
result = paste(authorList(paper), " ", fmtYear(paper$year), " ", fmtTitle(paper$title), ". ", paper$publisher, sep = "")
if(exists("organization", where = paper)){result = paste(result, ",", paper$organization, sep = "")}
if(exists("doi", where = paper)){result = paste(result, ",", paper$doi, sep = "")}
if(exists("url", where = paper)){result = paste(result, ",", paper$url, sep = "")}
result = paste(result, ".", sep = "")
result
}
environment(BM$formatMisc) = BM
print(testbib[1], .bibstyle = "BIOMATE")
BM$cite
exists("doi", where = testbib[1])
exists("06AQ19850103_prof", where = testbib[1])
testbib[1]$doi
testbib[1]
names(testbib)
A$fmtUrl()
A$fmtUrl
testbib[3]$organisation
testbib[3]$organization
testbib[3]$publisher
BM = bibstyle(style = "text", .init = T)
BM$formatMisc <- function (paper)
{
result = paste(authorList(paper), " ", fmtYear(paper$year), " ", fmtTitle(paper$title), ". ", paper$publisher, sep = "")
if(!is.null(paper$organization)){result = paste(result, ",", paper$organization, sep = "")}
if(!is.null(paper$doi)){result = paste(result, ",", paper$doi, sep = "")}
if(!is.null(paper$url)){result = paste(result, ",", paper$url, sep = "")}
result = paste(result, ".", sep = "")
result
}
environment(BM$formatMisc) = BM
print(testbib[1], .bibstyle = "BIOMATE")
print(testbib[3], .bibstyle = "BIOMATE")
bibstyle("BIOMATE",BM)
print(testbib[3], .bibstyle = "BIOMATE")
print(testbib[1], .bibstyle = "BIOMATE")
BM = bibstyle(style = "text", .init = T)
BM$formatMisc <- function (paper)
{
result = paste(authorList(paper), " ", fmtYear(paper$year), " ", fmtTitle(paper$title), ". ", paper$publisher, ".", sep = "")
if(!is.null(paper$organization)){result = paste(" ",result, ".", paper$organization, sep = "")}
if(!is.null(paper$doi)){result = paste(" ",result, ",", paper$doi, sep = "")}
if(!is.null(paper$url)){result = paste(" ",result, ",", paper$url, sep = "")}
result = paste(result, ".", sep = "")
result
}
environment(BM$formatMisc) = BM
bibstyle("BIOMATE",BM)
print(testbib[1], .bibstyle = "BIOMATE")
BM = bibstyle(style = "text", .init = T)
BM$formatMisc <- function (paper)
{
result = paste(authorList(paper), " ", fmtYear(paper$year), " ", fmtTitle(paper$title), " ", paper$publisher, , sep = "")
if(!is.null(paper$organization)){result = paste(,result, ". ", paper$organization, sep = "")}
if(!is.null(paper$doi)){result = paste(" ",result, ", ", paper$doi, sep = "")}
if(!is.null(paper$url)){result = paste(" ",result, ", ", paper$url, sep = "")}
result = paste(result, ".", sep = "")
result
}
environment(BM$formatMisc) = BM
bibstyle("BIOMATE",BM)
print(testbib[1], .bibstyle = "BIOMATE")
BM = bibstyle(style = "text", .init = T)
BM$formatMisc <- function (paper)
{
result = paste(authorList(paper), " ", fmtYear(paper$year), " ", fmtTitle(paper$title), " ", paper$publisher,  sep = "")
if(!is.null(paper$organization)){result = paste(,result, ". ", paper$organization, sep = "")}
if(!is.null(paper$doi)){result = paste(" ",result, ", ", paper$doi, sep = "")}
if(!is.null(paper$url)){result = paste(" ",result, ", ", paper$url, sep = "")}
result = paste(result, ".", sep = "")
result
}
environment(BM$formatMisc) = BM
bibstyle("BIOMATE",BM)
print(testbib[1], .bibstyle = "BIOMATE")
BM = bibstyle(style = "text", .init = T)
BM$formatMisc <- function (paper)
{
result = paste(authorList(paper), " ", fmtYear(paper$year), " ", fmtTitle(paper$title), " ", paper$publisher,  sep = "")
if(!is.null(paper$organization)){result = paste(result, ". ", paper$organization, sep = "")}
if(!is.null(paper$doi)){result = paste(result, ", ", paper$doi, sep = "")}
if(!is.null(paper$url)){result = paste(result, ", ", paper$url, sep = "")}
result = paste(result, ".", sep = "")
result
}
environment(BM$formatMisc) = BM
bibstyle("BIOMATE",BM)
print(testbib[1], .bibstyle = "BIOMATE")
BM = bibstyle(style = "text", .init = T)
BM$formatMisc <- function (paper)
{
result = paste(authorList(paper), " ", fmtYear(paper$year), " ", fmtTitle(paper$title), " ", paper$publisher, ". ", sep = "")
if(!is.null(paper$organization)){result = paste(result,  paper$organization,". ", sep = "")}
if(!is.null(paper$doi)){result = paste(result,  paper$doi,". ", sep = "")}
if(!is.null(paper$url)){result = paste(result,  paper$url,". ", sep = "")}
result
}
environment(BM$formatMisc) = BM
bibstyle("BIOMATE",BM)
print(testbib[1], .bibstyle = "BIOMATE")
test = read.bib("./product_data/supporting_information/citations/06AQ19850103.bib")
test = read.bib("./product_data/supporting_information/citations/06AQ19850103.bib")
test = read.bib("./product_data/supporting_information/citations/06AQ19850103.bib")
#' @title Create a new bibstyle for use in BIOMATE.
#'
#' @author Kimberlee Baldry
#' @description Executing this function will add a new "BIOMATE" style to a local library. This style is called within PIG_to_WHPE() and PROF_to_WHPE().
#'
#' @return returns message letting the user know the task was completed.
#'
#' @import tools
#'
#'
#' @export
add_bibstyle <- function(){
BM = bibstyle(style = "text", .init = T)
BM$formatMisc <- function (paper)
{
result = paste(authorList(paper), " ", fmtYear(paper$year), " ", fmtTitle(paper$title), " ", paper$publisher, ". ", sep = "")
if(!is.null(paper$organization)){result = paste(result,  paper$organization,". ", sep = "")}
if(!is.null(paper$doi)){result = paste(result,  paper$doi,". ", sep = "")}
if(!is.null(paper$url)){result = paste(result,  paper$url,". ", sep = "")}
if(!is.null(paper$urldate)){result = paste(result, "Accessed on ",  paper$urldate,". ", sep = "")}
result
}
environment(BM$formatMisc) = BM
bibstyle("BIOMATE",BM)
print("BIOMATE style has been added.")
}
add_bibstyle()
print(testbib[1], .bibstyle = "BIOMATE")
print(test[1], .bibstyle = "BIOMATE")
test = read.bib("./product_data/supporting_information/citations/06AQ19850103.bib")
print(test[1], .bibstyle = "BIOMATE")
library(dplyr)
library(tools)
library(data.table)
library(ncdf4)
library(readr)
library(geosphere)
library(stringi)
library(tidyr)
library(devtools)
#devtools::install_github("KimBaldry/BIO-MATE", subdir = "Rpackage")
library(BIOMATE)
BIOMATE::add_bibstyle()
dirs = list.dirs("E:/Data_downloads/PANGEAE",full.names = T, recursive = F)
for(dr in dirs){
if(all(!grepl(file.path(dr,"ctd"), list.dirs(file.path(dr))))){next}
fname = list.files(file.path(dr,"ctd"),pattern = ".tab", full.names = T)
# find the line where the data table starts
f <- file( fname, open = "r" )
n=0
while( TRUE ){
line <- readLines( f, 1L )
n = n+1
if(grepl(pattern = "\\*\\/" ,x = line)){
ls = n +1
break
}
}
close( f )
split_delim_file(path = file.path(dr,"ctd"), file_name = basename(fname), delim = "\t" , expo_split = F, station_var_name = "Event",station_split = T, fillcell = T, line_start = ls)
}
dirs = list.dirs("E:/Data_downloads/PANGEAE",full.names = T, recursive = F)
for(dr in dirs){
if(all(!grepl(file.path(dr,"ctd"), list.dirs(file.path(dr))))){next}
if(dr == "35XI20090905"){next}
fname = list.files(file.path(dr,"ctd"),pattern = ".tab", full.names = T)
# find the line where the data table starts
f <- file( fname, open = "r" )
n=0
while( TRUE ){
line <- readLines( f, 1L )
n = n+1
if(grepl(pattern = "\\*\\/" ,x = line)){
ls = n +1
break
}
}
close( f )
split_delim_file(path = file.path(dr,"ctd"), file_name = basename(fname), delim = "\t" , expo_split = F, station_var_name = "Event",station_split = T, fillcell = T, line_start = ls)
print(dr)
}
dir = "E:/Data_downloads/PANGEAE/06AQ19881122/ctd/split"
for(sp in c("PS141712_from_ANT-VII_3_phys_oce.csv","PS141521_from_ANT-VII_3_phys_oce.csv")){
data = read.csv(file.path(dir,sp), stringsAsFactors = F,header = T)
data2 = aggregate(data[,6:10],by = list(data$Depth),FUN = function(x){mean(x,na.rm =T)})
data3 = data[unique(data$Depth),]
data3[,6:10] = data2[2:6]
write.csv(data3,file.path(dir,sp),row.names = F)
}
